{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"6d63bf8a23010b19a23aa8f86cbc7ae884908b89","modified":1547717340038},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1547777216971},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1547777216971},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1547777216972},{"_id":"themes/next/.gitignore","hash":"ee0b13c268cc8695d3883a5da84930af02d4ed08","modified":1547777216973},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1547777216974},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1547777216974},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1547777216974},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1547777216974},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1547777216974},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1547777216975},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1547777216975},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1547777216975},{"_id":"themes/next/_config.yml","hash":"b7064202ab62d363e61080e91d7f8dc107b89580","modified":1548249568926},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1547777216976},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1547777216976},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1547777216999},{"_id":"source/about/index.md","hash":"731c9bf5e8be69988f46c2c737088d46fce84193","modified":1548308622682},{"_id":"source/_posts/333.md","hash":"9bb3c6f02a3cdc5e0cdfa69b67acb7497d182c89","modified":1547796352646},{"_id":"source/_posts/C-梳理笔记.md","hash":"64bde03b908a96e2fb07d9c3848b6a767e5f66c6","modified":1548306688465},{"_id":"source/_posts/Network-in-Network.md","hash":"a28c9568f2b5c2804c192d997877f5db8dc14e8c","modified":1548314042377},{"_id":"source/_posts/eclipse-and-github.md","hash":"bfaf673617cf863938f3b59d8bf8743bb35d47b1","modified":1547915605860},{"_id":"source/_posts/图片测试！.md","hash":"8fcb1d1bd15ed4704e609aa5f176a19493a095f6","modified":1547795840024},{"_id":"source/categories/index.md","hash":"e8ed7e3d1acd477d4814cd0ae2131593e39a4970","modified":1547777542533},{"_id":"source/_posts/欢迎来我的小屋！.md","hash":"bc53341f2967c21daf27c4e15d3d403f679178e3","modified":1547794667057},{"_id":"source/tags/index.md","hash":"d519efda4c5f1ef68e95c2703032f85fecab5881","modified":1547777627795},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1547777216972},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1228506a940114288d61812bfe60c045a0abeac1","modified":1547777216973},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"a0a82dbfabdef9a9d7c17a08ceebfb4052d98d81","modified":1547777216973},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1547777216973},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1547777216976},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1547777216977},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1547777216977},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1547777216977},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1547777216977},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1547777216978},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1547777216978},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1547777216978},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1547777216978},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1547777216978},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1547777216979},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1547777216979},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1547777216979},{"_id":"themes/next/languages/zh-Hans.yml","hash":"66b9b42f143c3cb2f782a94abd4c4cbd5fd7f55f","modified":1547777216979},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1547777216979},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1547777216979},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1547777216980},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1547777216998},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1547777216998},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1547777216998},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1547777216999},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1547777216999},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1547777216999},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1547777216999},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1547777217000},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1547777217000},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1547777217086},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1547777217086},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1547777217087},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547777217029},{"_id":"source/_posts/Network-in-Network/nerworkInNetwork1.png","hash":"139cf459a66b7a31924cf8951c3fd01660319b19","modified":1548312500582},{"_id":"source/_posts/图片测试！/test.jpg","hash":"30020ded9fd5e299e5f582778a2da706dbf7d24c","modified":1547795625641},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1547777216980},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1547777216980},{"_id":"themes/next/layout/_macro/my-copyright.swig","hash":"6b2005cb8bd6b7dfdfa8efd3ad50760f22019b0f","modified":1547781921993},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1547777216980},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1547777216980},{"_id":"themes/next/layout/_macro/post.swig","hash":"368709167c68f503221062ff31094d6531bded73","modified":1547911753718},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1547777216981},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1547777216982},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1547777216982},{"_id":"themes/next/layout/_partials/footer.swig","hash":"23da79bffdd6df6bf162396b0c0efdba775114da","modified":1548248535544},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1547777216982},{"_id":"themes/next/layout/_partials/head.swig","hash":"5e0eb5011430e8b87d80d2cffc916a746b308752","modified":1547782383374},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1547777216984},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1547777216984},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1547777216984},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1547777216984},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1547777216987},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1547777216987},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1547777216989},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1547777216995},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1547777216995},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1547777216995},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1547777216995},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1547777216996},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1547777216996},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1547777216996},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1547777217029},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1547777217029},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1547777217029},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1547777217030},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1547777217030},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1547777217031},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1547777217031},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1547777217031},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1547777217031},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1547777217031},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1547777217031},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1547777217032},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547777217032},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1547777217032},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1547777217032},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1547777217032},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1547777217032},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1547777217033},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1547777217001},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1547777217001},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1547777217001},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1547777217001},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1547777217002},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1547777217002},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1547777217002},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1547777217002},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1547777217002},{"_id":"source/_posts/Network-in-Network/nerworkInNetwork2.png","hash":"5c49d49b5b4cb70e62446a97df515f3623ebba98","modified":1548313252971},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547777216988},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547777216988},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547777217019},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547777217020},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547777217020},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547777217027},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1547777217028},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1547777216984},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1547777216984},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1547777216985},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1547777216985},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1547777216985},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1547777216985},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1547777216985},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1547777216985},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1547777216986},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1547777216988},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1547777216988},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1547777216989},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1547777216989},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1547777216990},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1547777216990},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1547777216991},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1547777216991},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1547777216991},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1547777216991},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1547777216992},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1547777216992},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1547777216992},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1547777216992},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1547777216992},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1547777216993},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1547777216993},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1547777216993},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1547777216994},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1547777216993},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1547777216994},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1547777216994},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1547777216994},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1547777216994},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1547777216994},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1547777216997},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1547777216997},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1547777216998},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1547777216998},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1547777217019},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1547777217019},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1547777217020},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1547777217020},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1547777217027},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1547777217027},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1547777217028},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1547777217028},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1547777217033},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1547777217033},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1547777217033},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1547777217033},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1547777217034},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1547777217034},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1547777217035},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1547777217035},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1547777217035},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1547777217036},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1547777217036},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1547777217041},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1547777217045},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1547777217045},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1547777217046},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1547777217046},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1547777217051},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1547777217051},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1547777217051},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1547777217051},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1547777217067},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1547777217053},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1547777217052},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1547777217053},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1547777217053},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1547777217053},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1547777217068},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1547777217068},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1547777217068},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1547777217069},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1547777217069},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1547777217070},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1547777217070},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1547777217071},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1547777217070},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1547777217075},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1547777217075},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1547777217076},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1547777217072},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1547777217072},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1547777217073},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1547777217073},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1547777217073},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1547777217073},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1547777217073},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1547777217074},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1547777217074},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1547777217074},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1547777217074},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1547777217074},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1547777217074},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1547777217075},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1547777217081},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1547777217081},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1547777217085},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1547777217085},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1547777217085},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1547777217067},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1547777216996},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1547777216997},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1547777217003},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1547777217003},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1547777217004},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1547777217004},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1547777217004},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1547777217008},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1547777217013},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1547777217017},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1547777217017},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1547777217017},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1547777217018},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1547777217018},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1547777217019},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1547777217019},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1547777217021},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1547777217021},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1547777217021},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1547777217022},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1547777217022},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1547777217023},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1547777217022},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1547777217023},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1547777217024},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1547777217024},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1547777217024},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1547777217025},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1547777217025},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1547777217025},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1547777217026},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1547777217026},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1547777217026},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1547777217026},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1547777217027},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1547777217035},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1547777217040},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1547777217041},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1547777217046},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1547777217046},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1547777217047},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1547777217047},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1547777217047},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1547777217047},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1547777217050},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1547777217050},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1547777217050},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1547777217052},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1547777217052},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1547777217054},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1547777217056},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1547777217055},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1547777217080},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1547777217081},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1547777217039},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1547777217039},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1547777217066},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1547777217066},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1547777217084},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1547777217004},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1547777217004},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1547777217005},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1547777217005},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1547777217005},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1547777217006},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1547777217006},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1547777217006},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1547777217007},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1547777217007},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1547777217007},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1547777217007},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1547777217008},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1547777217008},{"_id":"themes/next/source/css/_common/components/post/my-post-copyright.styl","hash":"e954bf95842945b196bbb0de7b8098950a780129","modified":1547781975450},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1547777217008},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1547777217009},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1547777217009},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1547777217009},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1547777217010},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1547777217010},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1547777217010},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1547777217010},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1547777217010},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1547777217010},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1547777217010},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1547777217011},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1547777217011},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1547777217011},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"439f112487afa53da823b53f569d6ebd19deaaca","modified":1547782206032},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1547777217011},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1547777217011},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1547777217012},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1547777217012},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1547777217012},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1547777217012},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1547777217012},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1547777217013},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1547777217013},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1547777217013},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1547777217015},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1547777217015},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1547777217016},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1547777217016},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1547777217016},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1547777217016},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1547777217016},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1547777217017},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1547777217017},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1547777217017},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1547777217013},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1547777217014},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1547777217013},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1547777217014},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1547777217014},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1547777217014},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1547777217015},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1547777217015},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1547777217015},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1547777217023},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1547777217023},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1547777217025},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1547777217037},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1547777217037},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1547777217037},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1547777217038},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1547777217038},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1547777217048},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1547777217048},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1547777217049},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1547777217049},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1547777217049},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1547777217049},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1547777217058},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1547777217065},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1547777217059},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1547777217044},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1547777217080},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1547777217063},{"_id":"themes/next/source/images/avatar.jpg","hash":"51b9ef85aea05f2f0ce6a474d1aa6c0c0786fcc3","modified":1547725251340},{"_id":"public/atom.xml","hash":"5bec97448d5a02b45ccd0bf51fa6a9e37895049a","modified":1548314052827},{"_id":"public/search.xml","hash":"41e2780d4b004dd57a5f23627cf997c10ac7beb1","modified":1548314052827},{"_id":"public/about/index.html","hash":"6077a9b16e0eaed84e9487682cdf3a22d99cd790","modified":1548314052976},{"_id":"public/categories/index.html","hash":"bf491671723848881e851ae5230decf54c0a55fc","modified":1548314052976},{"_id":"public/tags/index.html","hash":"44cee6148bbdae300ffed0292aa9ac86077cb4e0","modified":1548314052977},{"_id":"public/2019/01/20/C-梳理笔记/index.html","hash":"9bc5d910bcbcc8d3caa4cd630ffa9eae65421d6f","modified":1548314052977},{"_id":"public/2019/01/18/333/index.html","hash":"9b0c0f8593b7f75599ce25a48c426d47fb8471a1","modified":1548314052977},{"_id":"public/2019/01/18/图片测试！/index.html","hash":"7bd90fa6f15360181aaf2ef70a6e16e25e9b7969","modified":1548314052977},{"_id":"public/2019/01/18/欢迎来我的小屋！/index.html","hash":"cd4aea248c7baa199b0e644ba008692c9c618c5d","modified":1548314052978},{"_id":"public/archives/index.html","hash":"b6a93a1ba59fd00135bad43916e23f178d34d37e","modified":1548314052978},{"_id":"public/archives/2019/index.html","hash":"05f1690aa864e484265a407739bf5a2489203b6e","modified":1548314052978},{"_id":"public/archives/2019/01/index.html","hash":"7c8a4863c03e360572363164826ad350349c5833","modified":1548314052978},{"_id":"public/categories/闲聊/index.html","hash":"3287cf425e8bebf21a2e4614faae56a7a53f5081","modified":1548314052978},{"_id":"public/categories/C/index.html","hash":"b4c7391ad64ca8dc4c205e663dc41b75167e49f2","modified":1548314052978},{"_id":"public/index.html","hash":"1def94fd8af3eff02318b16d389b55b0efb201e7","modified":1548314052978},{"_id":"public/tags/闲聊/index.html","hash":"4570213b38443ffe1182e37919de079c04302618","modified":1548314052978},{"_id":"public/tags/C/index.html","hash":"c999c7690058b7b825110bc8b0accec2850cef4d","modified":1548314052978},{"_id":"public/2019/01/24/Network-in-Network/index.html","hash":"cf06d491f52261c468a1425a0b6f4b8938db95bf","modified":1548314052983},{"_id":"public/categories/计算机视觉论文阅读/index.html","hash":"3ab860bcf885d8ce10438c52bc2b20402245b0bf","modified":1548314052983},{"_id":"public/tags/深度学习论文/index.html","hash":"d9ac0880f49e4015b17d245504afbc1bfdcae669","modified":1548314052983},{"_id":"public/CNAME","hash":"6d63bf8a23010b19a23aa8f86cbc7ae884908b89","modified":1548314052988},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1548314052988},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1548314052988},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1548314052988},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1548314052988},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1548314052988},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1548314052988},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1548314052988},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1548314052988},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1548314052988},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1548314052988},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1548314052988},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548314052988},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1548314052988},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548314052988},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1548314052988},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1548314052989},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1548314052989},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1548314052989},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1548314052989},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1548314052989},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1548314052989},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1548314052989},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1548314052989},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1548314052989},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1548314052989},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1548314052989},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1548314052989},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1548314052989},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1548314052989},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1548314052989},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1548314052989},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548314053574},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548314053578},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1548314053579},{"_id":"public/2019/01/18/图片测试！/test.jpg","hash":"30020ded9fd5e299e5f582778a2da706dbf7d24c","modified":1548314053579},{"_id":"public/2019/01/24/Network-in-Network/nerworkInNetwork1.png","hash":"139cf459a66b7a31924cf8951c3fd01660319b19","modified":1548314053579},{"_id":"public/2019/01/24/Network-in-Network/nerworkInNetwork2.png","hash":"5c49d49b5b4cb70e62446a97df515f3623ebba98","modified":1548314053579},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1548314053584},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1548314053584},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1548314053585},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1548314053585},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1548314053585},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1548314053585},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1548314053585},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1548314053585},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1548314053585},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1548314053585},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1548314053585},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1548314053585},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1548314053585},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1548314053585},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1548314053586},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1548314053586},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1548314053586},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1548314053586},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1548314053586},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1548314053586},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1548314053586},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1548314053586},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1548314053586},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1548314053586},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1548314053586},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1548314053586},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1548314053586},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1548314053586},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1548314053586},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1548314053586},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1548314053586},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1548314053586},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1548314053586},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1548314053586},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1548314053586},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1548314053587},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1548314053587},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1548314053587},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1548314053587},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1548314053587},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1548314053587},{"_id":"public/css/main.css","hash":"179ed3b7fe50fe7b9d06db56832a2cda6651764e","modified":1548314053587},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1548314053587},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1548314053592},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1548314053592},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1548314053592},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1548314053592},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1548314053593},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1548314053593},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1548314053593},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1548314053593},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1548314053593},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548314053593},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1548314053598},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1548314053598},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1548314053602},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1548314053602},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1548314053608},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1548314053608},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1548314053609},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1548314053609},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1548314053609},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1548314053609},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1548314053609},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1548314053612},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1548314053612},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1548314053614},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1548314053614},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1548314053616},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1548314053622},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1548314053622},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1548314053627},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1548314053638},{"_id":"public/images/avatar.jpg","hash":"51b9ef85aea05f2f0ce6a474d1aa6c0c0786fcc3","modified":1548314053645},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1548314053655}],"Category":[{"name":"计算机视觉论文阅读","_id":"cjraa7jtq0005z0qzvxaeeb1w"},{"name":"闲聊","_id":"cjraa7jtv0008z0qzfcu15q5l"},{"name":"C++","_id":"cjraa7k1p000kz0qzn331v3s1"}],"Data":[],"Page":[{"title":"about","date":"2019-01-24T05:42:12.000Z","_content":"\n关于我。。","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-01-24 13:42:12\n---\n\n关于我。。","updated":"2019-01-24T05:43:42.682Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjraa7jtf0000z0qzabdrg1jr","content":"<p>关于我。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>关于我。。</p>\n"},{"title":"文章分类","date":"2019-01-18T02:11:26.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 文章分类\ndate: 2019-01-18 10:11:26\ntype: \"categories\"\n---\n","updated":"2019-01-18T02:12:22.533Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjraa7jtl0002z0qz40z7h2by","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-01-18T02:13:35.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-01-18 10:13:35\ntype: \"tags\" #新添加的内容\n---\n","updated":"2019-01-18T02:13:47.795Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjraa7k04000iz0qz0hj6mc4f","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"333","date":"2019-01-18T07:25:41.000Z","copyright":null,"password":null,"top":null,"_content":"\n![logo](图片测试！/test.jpg)","source":"_posts/333.md","raw":"---\ntitle: 333\ndate: 2019-01-18 15:25:41\ncategories:\ntags:\ncopyright:\npassword:\ntop:\n---\n\n![logo](图片测试！/test.jpg)","slug":"333","published":1,"updated":"2019-01-18T07:25:52.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjraa7jtg0001z0qzydl43c3i","content":"<p><img src=\"/2019/01/18/333/test.jpg\" alt=\"logo\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/2019/01/18/333/test.jpg\" alt=\"logo\"></p>\n"},{"title":"Network in Network","date":"2019-01-24T07:08:27.000Z","copyright":true,"top":true,"_content":"# Network in network （NIN）\n`2014年` 论文地址：  [https://arxiv.org/abs/1312.4400](https://arxiv.org/abs/1312.4400 \"论文地址\")\n\n## 论文核心\n\nNIN特点: \n\n- 微型网络: \n\n\t- 增强模型在感受野（receptive field）内对局部区域的辨别能力;  \n\n\n- GAP全局平均池化: \n\t- 强化了特征图与分类的对应关系;\n\t- GAP本身是结构化的正则化器，能避免整体结构的过拟合；\n\n\t\n\n\n> 　　卷积层使用线性滤波器（卷积核）来扫描输入，后面接一个非线性激活函数。而卷积核是广义线性模型（generalized linear model ）GLM，抽象程度低（该特征对同一概念的变体是不变的）,用更有效的 `非线性函数逼近器` 代替 `GLM` 可以增强局部模型的抽象能力。当样本的隐含概念（latent concept）线性可分时，GLM可以达到很好的抽象程度，例如：这些概念的变体都在GLM分割平面的同一边，而 <font color=red 传统的CNN就默认了这个假设——认为隐含概念（latent concept）是线性可分的</font>。 然而，同一概念的数据通常是非线性流形的（nonlinear manifold），捕捉这些概念的表达通常都是输入的高维非线性函数。在NIN中，GLM用“微型网络”结构替代，该结构是一个`非线性函数逼近器`。  \n> \n> 　　本文作者选择多层感知器实例化微型网络，该感知器是一个通用函数逼近器，也是一个通过反向传播训练的神经网络。\n\n![logo](Network-in-Network/nerworkInNetwork1.png)\n该图是 单独的 `mlpconv 层`\n- 这里有没有尝试过其他微型网络结构？？？？（可创新吗）\n- \n## NIN 网络结构\n![logo](Network-in-Network/nerworkInNetwork2.png)\n\n　　NIN 的整体结构是一系列 `mlpconve层` 的堆叠，最上层接一个 `GAP层` 和 `分类层`。 `mlpconv层` 间的子层可以被相加，像CNN和maxout网络一样。上图展示了一个包含三个mlpconv层的NIN。每个mlpconv层，包含一个三层的感知器，NIN和微型网络的层数都是灵活的，可以根据具体任务微调。\n\n　　这里没有采用传统CNN的 `全连接层` 进行分类，而是直接通过 `全局平均池化层（GAP）`输出最后一个 `mlpconv层特征图`的空间平均值作为类别的置信度值，然后将得到的向量输入 `softmax层`。","source":"_posts/Network-in-Network.md","raw":"---\ntitle: Network in Network\ndate: 2019-01-24 15:08:27\ncategories: \n- 计算机视觉论文阅读\ntags: \n- 深度学习论文\ncopyright: true\ntop: true\n---\n# Network in network （NIN）\n`2014年` 论文地址：  [https://arxiv.org/abs/1312.4400](https://arxiv.org/abs/1312.4400 \"论文地址\")\n\n## 论文核心\n\nNIN特点: \n\n- 微型网络: \n\n\t- 增强模型在感受野（receptive field）内对局部区域的辨别能力;  \n\n\n- GAP全局平均池化: \n\t- 强化了特征图与分类的对应关系;\n\t- GAP本身是结构化的正则化器，能避免整体结构的过拟合；\n\n\t\n\n\n> 　　卷积层使用线性滤波器（卷积核）来扫描输入，后面接一个非线性激活函数。而卷积核是广义线性模型（generalized linear model ）GLM，抽象程度低（该特征对同一概念的变体是不变的）,用更有效的 `非线性函数逼近器` 代替 `GLM` 可以增强局部模型的抽象能力。当样本的隐含概念（latent concept）线性可分时，GLM可以达到很好的抽象程度，例如：这些概念的变体都在GLM分割平面的同一边，而 <font color=red 传统的CNN就默认了这个假设——认为隐含概念（latent concept）是线性可分的</font>。 然而，同一概念的数据通常是非线性流形的（nonlinear manifold），捕捉这些概念的表达通常都是输入的高维非线性函数。在NIN中，GLM用“微型网络”结构替代，该结构是一个`非线性函数逼近器`。  \n> \n> 　　本文作者选择多层感知器实例化微型网络，该感知器是一个通用函数逼近器，也是一个通过反向传播训练的神经网络。\n\n![logo](Network-in-Network/nerworkInNetwork1.png)\n该图是 单独的 `mlpconv 层`\n- 这里有没有尝试过其他微型网络结构？？？？（可创新吗）\n- \n## NIN 网络结构\n![logo](Network-in-Network/nerworkInNetwork2.png)\n\n　　NIN 的整体结构是一系列 `mlpconve层` 的堆叠，最上层接一个 `GAP层` 和 `分类层`。 `mlpconv层` 间的子层可以被相加，像CNN和maxout网络一样。上图展示了一个包含三个mlpconv层的NIN。每个mlpconv层，包含一个三层的感知器，NIN和微型网络的层数都是灵活的，可以根据具体任务微调。\n\n　　这里没有采用传统CNN的 `全连接层` 进行分类，而是直接通过 `全局平均池化层（GAP）`输出最后一个 `mlpconv层特征图`的空间平均值作为类别的置信度值，然后将得到的向量输入 `softmax层`。","slug":"Network-in-Network","published":1,"updated":"2019-01-24T07:14:02.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjraa7jtm0003z0qz56c5l89c","content":"<h1 id=\"Network-in-network-（NIN）\"><a href=\"#Network-in-network-（NIN）\" class=\"headerlink\" title=\"Network in network （NIN）\"></a>Network in network （NIN）</h1><p><code>2014年</code> 论文地址：  <a href=\"https://arxiv.org/abs/1312.4400\" title=\"论文地址\" target=\"_blank\" rel=\"noopener\">https://arxiv.org/abs/1312.4400</a></p>\n<h2 id=\"论文核心\"><a href=\"#论文核心\" class=\"headerlink\" title=\"论文核心\"></a>论文核心</h2><p>NIN特点: </p>\n<ul>\n<li><p>微型网络: </p>\n<ul>\n<li>增强模型在感受野（receptive field）内对局部区域的辨别能力;  </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>GAP全局平均池化: <ul>\n<li>强化了特征图与分类的对应关系;</li>\n<li>GAP本身是结构化的正则化器，能避免整体结构的过拟合；</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>　　卷积层使用线性滤波器（卷积核）来扫描输入，后面接一个非线性激活函数。而卷积核是广义线性模型（generalized linear model ）GLM，抽象程度低（该特征对同一概念的变体是不变的）,用更有效的 <code>非线性函数逼近器</code> 代替 <code>GLM</code> 可以增强局部模型的抽象能力。当样本的隐含概念（latent concept）线性可分时，GLM可以达到很好的抽象程度，例如：这些概念的变体都在GLM分割平面的同一边，而 &lt;font color=red 传统的CNN就默认了这个假设——认为隐含概念（latent concept）是线性可分的。 然而，同一概念的数据通常是非线性流形的（nonlinear manifold），捕捉这些概念的表达通常都是输入的高维非线性函数。在NIN中，GLM用“微型网络”结构替代，该结构是一个<code>非线性函数逼近器</code>。  </p>\n<p>　　本文作者选择多层感知器实例化微型网络，该感知器是一个通用函数逼近器，也是一个通过反向传播训练的神经网络。</p>\n</blockquote>\n<p><img src=\"/2019/01/24/Network-in-Network/nerworkInNetwork1.png\" alt=\"logo\"><br>该图是 单独的 <code>mlpconv 层</code></p>\n<ul>\n<li>这里有没有尝试过其他微型网络结构？？？？（可创新吗）</li>\n<li><h2 id=\"NIN-网络结构\"><a href=\"#NIN-网络结构\" class=\"headerlink\" title=\"NIN 网络结构\"></a>NIN 网络结构</h2><img src=\"/2019/01/24/Network-in-Network/nerworkInNetwork2.png\" alt=\"logo\"></li>\n</ul>\n<p>　　NIN 的整体结构是一系列 <code>mlpconve层</code> 的堆叠，最上层接一个 <code>GAP层</code> 和 <code>分类层</code>。 <code>mlpconv层</code> 间的子层可以被相加，像CNN和maxout网络一样。上图展示了一个包含三个mlpconv层的NIN。每个mlpconv层，包含一个三层的感知器，NIN和微型网络的层数都是灵活的，可以根据具体任务微调。</p>\n<p>　　这里没有采用传统CNN的 <code>全连接层</code> 进行分类，而是直接通过 <code>全局平均池化层（GAP）</code>输出最后一个 <code>mlpconv层特征图</code>的空间平均值作为类别的置信度值，然后将得到的向量输入 <code>softmax层</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Network-in-network-（NIN）\"><a href=\"#Network-in-network-（NIN）\" class=\"headerlink\" title=\"Network in network （NIN）\"></a>Network in network （NIN）</h1><p><code>2014年</code> 论文地址：  <a href=\"https://arxiv.org/abs/1312.4400\" title=\"论文地址\" target=\"_blank\" rel=\"noopener\">https://arxiv.org/abs/1312.4400</a></p>\n<h2 id=\"论文核心\"><a href=\"#论文核心\" class=\"headerlink\" title=\"论文核心\"></a>论文核心</h2><p>NIN特点: </p>\n<ul>\n<li><p>微型网络: </p>\n<ul>\n<li>增强模型在感受野（receptive field）内对局部区域的辨别能力;  </li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>GAP全局平均池化: <ul>\n<li>强化了特征图与分类的对应关系;</li>\n<li>GAP本身是结构化的正则化器，能避免整体结构的过拟合；</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>　　卷积层使用线性滤波器（卷积核）来扫描输入，后面接一个非线性激活函数。而卷积核是广义线性模型（generalized linear model ）GLM，抽象程度低（该特征对同一概念的变体是不变的）,用更有效的 <code>非线性函数逼近器</code> 代替 <code>GLM</code> 可以增强局部模型的抽象能力。当样本的隐含概念（latent concept）线性可分时，GLM可以达到很好的抽象程度，例如：这些概念的变体都在GLM分割平面的同一边，而 &lt;font color=red 传统的CNN就默认了这个假设——认为隐含概念（latent concept）是线性可分的。 然而，同一概念的数据通常是非线性流形的（nonlinear manifold），捕捉这些概念的表达通常都是输入的高维非线性函数。在NIN中，GLM用“微型网络”结构替代，该结构是一个<code>非线性函数逼近器</code>。  </p>\n<p>　　本文作者选择多层感知器实例化微型网络，该感知器是一个通用函数逼近器，也是一个通过反向传播训练的神经网络。</p>\n</blockquote>\n<p><img src=\"/2019/01/24/Network-in-Network/nerworkInNetwork1.png\" alt=\"logo\"><br>该图是 单独的 <code>mlpconv 层</code></p>\n<ul>\n<li>这里有没有尝试过其他微型网络结构？？？？（可创新吗）</li>\n<li><h2 id=\"NIN-网络结构\"><a href=\"#NIN-网络结构\" class=\"headerlink\" title=\"NIN 网络结构\"></a>NIN 网络结构</h2><img src=\"/2019/01/24/Network-in-Network/nerworkInNetwork2.png\" alt=\"logo\"></li>\n</ul>\n<p>　　NIN 的整体结构是一系列 <code>mlpconve层</code> 的堆叠，最上层接一个 <code>GAP层</code> 和 <code>分类层</code>。 <code>mlpconv层</code> 间的子层可以被相加，像CNN和maxout网络一样。上图展示了一个包含三个mlpconv层的NIN。每个mlpconv层，包含一个三层的感知器，NIN和微型网络的层数都是灵活的，可以根据具体任务微调。</p>\n<p>　　这里没有采用传统CNN的 <code>全连接层</code> 进行分类，而是直接通过 <code>全局平均池化层（GAP）</code>输出最后一个 <code>mlpconv层特征图</code>的空间平均值作为类别的置信度值，然后将得到的向量输入 <code>softmax层</code>。</p>\n"},{"title":"图片测试！","date":"2019-01-18T07:11:41.000Z","_content":"# 测试图片 #\n![logo](图片测试！/test.jpg)","source":"_posts/图片测试！.md","raw":"---\ntitle: 图片测试！\ndate: 2019-01-18 15:11:41\ncategories: 闲聊\ntags: 闲聊\n---\n# 测试图片 #\n![logo](图片测试！/test.jpg)","slug":"图片测试！","published":1,"updated":"2019-01-18T07:17:20.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjraa7jto0004z0qzrog572n1","content":"<h1 id=\"测试图片\"><a href=\"#测试图片\" class=\"headerlink\" title=\"测试图片\"></a>测试图片</h1><p><img src=\"/2019/01/18/图片测试！/test.jpg\" alt=\"logo\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"测试图片\"><a href=\"#测试图片\" class=\"headerlink\" title=\"测试图片\"></a>测试图片</h1><p><img src=\"/2019/01/18/图片测试！/test.jpg\" alt=\"logo\"></p>\n"},{"title":"欢迎来我的小屋！","date":"2019-01-18T06:54:22.000Z","top":1,"_content":"# 哈哈 #\n\n## 试试效果 ##\n\n> 一直想建一个自己的网站\n\n    现在先试试这个\n- \n1. aa\n1. bb\n1. cc\n1. dd","source":"_posts/欢迎来我的小屋！.md","raw":"---\ntitle: 欢迎来我的小屋！\ndate: 2019-01-18 14:54:22\ncategories: 闲聊\ntags: 闲聊\ntop: 1\n---\n# 哈哈 #\n\n## 试试效果 ##\n\n> 一直想建一个自己的网站\n\n    现在先试试这个\n- \n1. aa\n1. bb\n1. cc\n1. dd","slug":"欢迎来我的小屋！","published":1,"updated":"2019-01-18T06:57:47.057Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjraa7jtt0007z0qzwimnuxsa","content":"<h1 id=\"哈哈\"><a href=\"#哈哈\" class=\"headerlink\" title=\"哈哈\"></a>哈哈</h1><h2 id=\"试试效果\"><a href=\"#试试效果\" class=\"headerlink\" title=\"试试效果\"></a>试试效果</h2><blockquote>\n<p>一直想建一个自己的网站</p>\n</blockquote>\n<pre><code>现在先试试这个\n</code></pre><ul>\n<li></li>\n</ul>\n<ol>\n<li>aa</li>\n<li>bb</li>\n<li>cc</li>\n<li>dd</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"哈哈\"><a href=\"#哈哈\" class=\"headerlink\" title=\"哈哈\"></a>哈哈</h1><h2 id=\"试试效果\"><a href=\"#试试效果\" class=\"headerlink\" title=\"试试效果\"></a>试试效果</h2><blockquote>\n<p>一直想建一个自己的网站</p>\n</blockquote>\n<pre><code>现在先试试这个\n</code></pre><ul>\n<li></li>\n</ul>\n<ol>\n<li>aa</li>\n<li>bb</li>\n<li>cc</li>\n<li>dd</li>\n</ol>\n"},{"title":"C++梳理笔记","date":"2019-01-20T12:30:39.000Z","copyright":null,"password":123456,"top":null,"_content":"\n<font color=\"red\"><big>测试内容</big></font>\n\n\n~~删除线~~\n\n[链接](http://zhuzhuyule.xyz)\n\n![logo](图片测试！/test.jpg)\n\n# C++学习笔记\n\n## **类型转换：**\n\n1. 隐式转换： 低类型转换为高类型\n\n       浮点数（直接舍掉小数，不四舍五入） + 整数\n\n2. 显式转换：\n\n    \tint **(**z**) = (**int**)** z **= static_cast\\<**int**\\> (**z**)**\n\n。。。\n\n### **数据的输入和输出：信息的流动**\n\n 1. 输入：\n\n 2. 输出：\n\n 3. 流类库的操纵符：\n\n### **程序控制：**\n\n\t\tif, while, for, do-while , break, continue, { switch,case,default } ;\n1. do-while:\n\n\t    do 语句      // 先执行一次\n\t    while(表达式)；\n\n2. for的范围，遍历容器：\n\n\n### **自定义类型：**\n\n* 类型别名： \n\n\n  1. typedef double Area, V;\n\n  2. using Area = double\n\n\n\n\n* 枚举类型： 有限的个数\n\n　　　　不限定作用域： enum 类型名 { 变量值列表}\n\n　　　　限定作用域：\n\n　　　注：枚举元素是常量，不能赋值\n\n　　　　　枚举元素有默认值，默认0,1,2,3,4，声明时可以另外指定\n\n　　　　　可以进行关系运算\n\n* auto类型 和decltyoe类型\n\t\t\n\t\t    decltype( float( i )) j = 2;   // j值是2，类型是float;\n\t\t\n\t\t    auto m = 2.5;  // m 为float;\n\n* 结构体( C语言中的)： struct\n\n\t\t\tstruct MyTimeStruct{   //定义 结构体类型\n\t\t\t    unsigned int year,mouth,day,hour,min,sec;\n\t\t\t};\n\n\n\n## **函数： 可重用的功能模块（定义和调用）**\n\n### **函数定义：**\n\n　　形参不占用空间，调用时分配；\n\n### **函数调用：**\n\n　　调用前要函数声明： int sum**(** int a**,** int b**);**\n\n　　1. 函数的嵌套调用：\n\n　　2. 函数的递归调用： 直接或者间接调用自身\n\n计算n!\n\n\t\tunsigned int fac( unsigned int n){\n\t\t    if (n == 0) return 1;\n\t\t    return fac( n - 1) * n;\n\t\t}\n\n汉诺塔\n\n\t\t分析：\n\t\t1.\tA 上的n-1个盘子移动到B上（借助C）;\n\t\t2.\tA上剩下的盘子移动到C上；\n\t\t3.\tB上的n-1个盘子移动到C上（借助A）\n\t\tvoid move(char src, char obj)\n\t\t{\n\t\t    cout << src << \"--->>>\" << obj << endl;\n\t\t}\n\t\t\n\t\tvoid hanoi(int n, char src, char medium, char obj)\n\t\t{\n\t\t    if(n == 1)\n\t\t        move(src, obj);\n\t\t    else{\n\t\t        hanoi(n-1, src, obj, medium);\n\t\t        move(src, obj);\n\t\t        hanoi(n-1, medium, src, obj);\n\t\t    }\n\t\t}\n\n\n### **函数的参数：**\n\n1. 形参不占用空间，调用时分配；\n\n2. 计算结果返回多个（利用引用）\n\n3. 多个参数时，从后开始传\n\n### **引用类型（&）：** 必须初始化，该类型不可改变，是其他变量的别名\n\t\n\t\tint i, j;\n\t\tint & ri = i;  // 定义int引用类型变量 ri, 初始化为i的引用\n\n\n### **含有可变参数的函数：（两种方法）**\n\n1. 所有实参类型相同：`initializer_list<int> li; //类模板, 都是常量`\n\n2. 具体看第九章\n\n3. 类型不同：\n\n### **内联函数（inline）： **用函数体内的语句，替换函数调用表达式，编译时完成，类似 #define\n\n声明： `inline int calArea(int a){  }`\n\n要求： 1. 不能有循环，switch语句 2. 定义在调用之前 3. 不能有异常接口声明\n\n###  constexpr 函数：（常量表达式函数）\n\n\n### **带默认参数的函数：**\n\n\t\tint getVa(int length, int weight = 2)\n\n### **函数的重载：**（C++多态性的重要机制，编译过程中实现）\n\n函数体同名，参数类型不同/参数个数不同\n\n\t\tint add(int x, int y);\n\n\t\tfloat add(float x, float y);\n\n\t\tfloat add(float x, float y, float z);\n\n\n### **C++系统函数：**\n\n\t\t#include <cmath>\n\t\t\t|_\n\t\t\t|_\n\t\t#include <cstdlib>\n\t\t\t|_\n\t\t\t|_\n\t\t#include <cstdio>\n\t\t\t|_\n\t\t\t|_\n\t\t#include <ctime>\n\t\t\t|_\n\t\t\t|_\n\n\n\n## **类和对象**\n\n类：构建对象的蓝图，\n\n对象：由类创建，含有数据和方法\n\n封装：对数据和操作数据的方法的组合绑定\n\n继承：在已有类基础上，形成新的类\n\n多态：\n\n构造函数：定义对象时，通过构造函数初始化\n\n析构函数：删除对象时，通过析构函数释放资源\n\n### ** 类和对象的定义：**\n\n定义类：\n\n\t\tclass {  //类名称 \n\t\t    public:\n\t\t        // 公有成员,外部接口\n\t\t    private:\n\t\t        // 私有成员\n\t\t    protected:\n\t\t        int hour = 0; // 类内初始化\n\t\t        // 保护型成员\n\t\t}\n\n\n注意：不指定类型，默认为私有；\n\n### **成员函数：**\n\t\t\n\t\t|_ 内联成员函数： 类内声明或者inline关键字\n\n\t\t|_类外实现：void 类名称::成员函数名称（）{ }\n\n### **构造函数：**\n\n-  在创建对象时，自动调用来初始化数据\n\n-  与类名相同\n\n-  构造函数有初始化列表\n\n-  格式 类名（string s, lei i）：s(初始值)，i(初始值){ }；\n\n### **委托构造函数：**一个构造函数 通过另一个构造函数 初始化\n\n### **复制构造函数：**\n\n用途：\n\n-   用存在的对象 去初始化新对象 （通过引用旧的对象）\n\n-   函数f的形参是类的对象，调用f时，将用实参对象初始化形参对象\n\n-   函数g的返回值是类的对象，用return的对象来在主调函数中初始化一个无名对象\n\n### **析构函数：**生存期结束，删除清理工作，不能有return，不能有参数\n\n\t    class 类名{\n\n\t    public:\n\t        类名（形参）； // 构造函数\n\t        类名（const 类名& 旧对象名）；  // 复制构造函数 =delete是不生成\n\t\t\t~ 类名（）；\n\t    }\n\n\n>   注：未声明时，编译器自己生成一个默认的\n\n### **前向引用声明：**两个类相互引用时，某个类在引用之前就声明\n\n\t    class A;  //前向引用声明，只是一个标识符，不是万能的\n\t    class B{\n\t    public:\n\t        void A(B b);\n\t    }\n\n\t    class A{\n\t    public：\n\t        void B（A a）;\n\t    }\n\n\n### **结构体：**特殊的类，默认是公有的，可以有函数成员\n\n\t    //公有成员\n\t        int a;\n\t    protected:\n\t        int b;\n\t    private:\n\t        int c;\n\t    };\n\n\n### **联合体：**\n\n目的：存储空间的共用，成员不能同时有效，比如某人语文课成绩，只有一种可能；\n\t\t\n\t\tunion Mark{ // 成绩的联合体， 只有一个成立\n\t\t    char grade;  //等级类的成绩\n\t\t    bool pass;  // 是否通过的成绩\n\t\tint percent;  //百分制成绩  }\n\n### **枚举类：**\n\nenum class 枚举类型名： 底层类型（int）**{** 枚举列表 **};**\n\n    //默认 int\n\n优势：\n\n-   强制作用域 --必须在枚举类 枚举类型名：：枚举值，不同枚举类可以有同名值了\n\n-   转换限制 --枚举对象不能与整型 隐式转换\n\n-   底层类型 --可以指定\n\n\n## **数据共享和保护：**\n\n### **作用域分类：**\n\n函数原型作用域：\n\n- 形参的范围在（）内，所以不需要名字也行，int area( int );\n\n局部作用域\n\n- 函数{ }内\n\n- if、for、while { }内\n\n类作用域： 类外访问类的成员\n\n- 静态成员：通过 对象名.成员名 访问\n\n- 非静态成员：\n\n- 文件作用域\n\n- 命名空间作用域： 10章\n\n### **对象的生存期：**\n\n静态生存期： 整个程序结束后消失\n\n- 函数内的静态对象， 用static ，全局寿命，只局部可见\n\n动态生存期：\n\n- 离开作用域后消失\n\n- 下次进函数重新生成对象\n\n### **类的静态数据成员：**\n\n- static 声明\n\n- 为该类所有对象共享，具有静态生存期\n\n- 必须在类外定义和初始化，类内声明，用：：指明所属于的类\n\n比如记录 类产生了多少对象；opencv中的Mat对象好像用到了？？？？\n\n\t\tclass base{   \n\t\t    public :   \n\t\t           static   int   _num;//声明   \n\t\t};   \n\t\tint  base::_num=0;  //真正定义  \n\n\n### **类的友元：**\n\n- 破坏数据封装和数据隐藏的机制\n\n- 尽量不用\n\n### ** 友元函数：**\n\n- 类声明中由关键字 friend 修饰说明的非成员函数\n\n- 可以在其函数体内访问对象的private,protected成员\n\n- 但必须通过对象名：：访问，函数参数为类的引用\n-   \n### ** 友元类：**\n\n\t\tclass A{\n\t\t    friend B;\n\t\t  public:\n\t\t    void display(){\n\t\t        count << x << enld;\n\t\t    }\n\t\t  private:\n\t\t    int x;\n\t\t}\n\t\t\n\t\tclass B{\n\t\t  public:\n\t\t    void set(int i);\n\t\t    void display();\n\t\t  private:\n\t\t    A a;\n\t\t}\n\t\t\n\t\tvoid B::set(int i){\n\t\t    a.x = i;   // B类中改变 A类私有值\n\t\t}\n\t\tvoid B::display(){\n\t\t    a.display()\n\t\t}\n\n\n### **共享数据的保护：**\n\n#**常类型：**const\n\n常对象：必须初始化，不可更新\n\n\t\tclass A{\n\t\t}\n\t\tA const a; // a是常对象\n\n\n常成员：(不可以放在构造函数体内复制，可以在初始化列表中)\n\n\t\tA：：A(int i):a(i){ }\n\n- 常数据成员：const修饰的\n\n- 静态常数据成员： static const int b;\n\n- 常函数成员（用来处理常对象的函数）\n\n    - 不更新对象的数据成员\n\n    - 声明和实现都带const\n\n\n\t\t\tclass A{\n\t\t\t    void f（int a）const;\n\t\t\t}\n\t\t\tvoid A::f(int a) const{  \n\t\t\t}; // f是常对象函数, 处理常对象\n\n\n- 常引用：不可更新\n\n　　　引用是双向传递的，避免修改原值的方法就是常引用；\n\n         const A& a;\n\n- 常数组：\n\n- 常指针：\n\n### **多文件结构和预编译命令：**\n\n- .h 系统使用\n\n- .hpp 个人使用(类的声明,函数的声明)\n\n- .cpp (类的实现，函数的实现)\n\n   ![](media/f5d645ed218d5fa3e753f771b72310fc.png)\n\n### **外部变量：**\n\n文件作用域中定义的变量默认是外部变量，其他文件使用前，extern声明\n\n将变量和函数限制在编译单元内：namespcae:\n\n\t\tnamespace{ //匿名的命名空间，外部不可调用任何东西\n\t\t    int i;\n\t\t    void fun(){\n\t\t        i++;\n\t\t    }\n\t\t}\n\n\n### **预编译命令：**\n\n\t\t#include< >  标准方式搜索，从系统目录include\n\n\n\t\t#include”” 先当前目录搜索，没有再标准搜索\n\n\n\t\t#define \n\n\n\t\t#undef 删除有#define的宏\n\n\t\t#if 表达式  // 条件编译指令\n\t\t---\n\t\t#else\n\t\t---\n\t\t#endif \n\n\n\t\t#ifndef 标识符\n\t\t---\n\t\t#else  \n\t\t---\n\t\t#endif\n\n\n\n## **数组，指针与字符串：**\n\n### **数组：**\n\n定义： `int arr**[**m**][**n**]**…;`\n\n　　注：二维数组中 arr[1] 第二行首地址\n\n### **数组作为函数参数：**\n\n　　数组名做参数： 形参，实参都是数组名，传入的是地址\n\n### **对象数组：**\n\n　　定义：类名 数组名[对象元素个数]\n\n　　访问：数组名[下标].成员名\n\n### **基于范围的for循环：**c++11,自动遍历整个容器\n\n\t  for( auto x : 容器){ } for( auto &x : 容器){ }\n\n注意：\n\n- auto &x是元素引用，auto x是元素的副本\n\n- auto推导出的类型是容器中的值类型\n\n- ：冒号后的表达式只执行一次\n\n### **指针：**\n\n### **定义：**\n\n\t\tstatic int i;\n\t\t\n\t\tstatic int * p = &I;\n\n### **指针的初始化和赋值：**\n\n### **指针的算术运算，关系运算：**\n\n### **指针数组：**\n\n        类名  *p[2];\n\n### **指向数组的指针：**\n\n        int **p; 指向二维数组的指针\n\n### **指针与函数：**\n\n- 指针做参数：大批量数据提高效率\n\n- 指针类型的函数：返回类型是指针\n\n\t\tint * function(int i){return 全局或者静态的 }；// 不能返回非静态局部变量\n\n-  指向函数的指针：实现函数回调的功能\n\n>   定义： 数据类型 (\\*f)(参数表);\n\n>   数据类型：返回值\n\n-   对象指针：\n\n>   定义： 类名 \\*对象指针名 = & 对象；\n\n>   访问对象： 对象指针名-\\>成员名\n\n（\\*对象指针名）.成员名\n\n- this 指针：成员函数的一个隐士参数，初始化为对象的地址，不可改变\n\n- 隐含于类的每个非静态成员函数中\n\n- 指出成员函数所操作的当前的对象\n\n- \\*this 是当前对象地址\n\n### **动态内存分配：**\n\nnew** 类型名 **(**初始化列表**) // 返回首字节地址\n\ndelete 指针p //p一直在，删除的只是p指向的对象申请的空间\n\n动态数组：\nnew 类型名[数组长度]\n\ndelete[] 数组首地址p指针\n\n### **智能指针：**C++11\n\n### **内存管理**\n\n-   unique_ptr:\n\n    -   不允许多个指针共享资源，标准库中move可以转移指针，但原来指针会失效\n\n-   shared_ptr:\n\n    -   多指针共享\n\n-   weak_ptr:\n\n    -   可复制共享\n\n>   Vector对象：类模板\n\n优势：\n\n-   封装任何形式的动态数组，自动创建，删除\n\n-   下标越界检查\n\n定义： vector <元素类型> object（长度）\n\n- `object.begin()  object.end()  object.size()`\n\n- auto 遍历vector `for(auto e: object);`\n\n### **对象的复制和移动：**\n\n-   浅层复制和深层复制：复制对象用到复制构造函数，默认的复制构造只传递了指针，两个变量指向同一块内存，释放其中一个，再释放第二个会出错；\n\n    -   浅层：实现对象间数据一一对应的复制，但两个对象指向同一内存\n\n    -   深层：当对象成员是指针类型，应该对指针所指对象进行复制。\n\n>   类名**::**类名**(**const 类名**&** v**){**\n\n>   size **=** v**.**size**;**\n\n>   data_ptr **= new** Ponit**[**size**];**\n\n>   **for(**int i**=**0**;** i **\\<** size**; ++**i**){**\n\n>   data_ptr**[**i**] =** v**.**data_ptr**[**i**];**\n\n>   **}**\n\n>   **}**\n\n-   移动构造：C++11,省去了构造和删除临时对象的过程\n\n    ![](media/8c3092d99bcdba78edeb2d8123270ffe.png)\n\n>   class_name**(**class_name **&&**old**)::**xptr**(**old**.**xptr**){**\n\n>   n**.**xptr **= NULL;** // 原来的指针清空\n\n>   **}**\n\n### **C风格字符串：**字符数组\n\n### **string类：**\n\n常用构造函数：\n\n-   string(); //默认构造，长度为0\n\n    -   string s1**;**\n\n-   string(const char \\*s) //指针s所指向的字符串常量初始化该对象\n\t\n\t\tstring s2 = “abc”;\n\t\t\n\t\tstring(const string &rhs) //复制构造函数\n\t\t\n\t\tstring s3 = s2;\n\n访问：下标访问\n\n整行字符串的输入： cin 被空格隔开\n\ngetline(cin,s2); //包含\\#include\\<string\\>\n\ngetline(cin,s2,’,’);\n\n\n## **继承和派生：** 充分利用原有的\n\n继承：保持已有类的特征来构造新类\n\n派生：在已有类基础上新增自己的特性\n\n基类：父类\n\n派生类：子类\n\n直接基类和间接基类\n\n单继承：\n\n\tclass 派生类名：继承方式 基类名{  //继承方式，\n\t    成员声明；//新增成员的声明\n\t}\n\n\n多继承：\n\n\tclass 派生类名：继承方式1 基类1，继承方式2 基类2{\n    \t成员声明；\n\t}\n\n\n### **继承的方式：**\n\n控制：派生类对基类成员的访问权限\n\n-   公有继承 public\n\n>   基类中的pubilc和protected访问属性在派生类中不变\n\n>   基类的pravate不可被对象直接访问\n\n-   私有继承 ：内部可以访问基类的公有和保护成员，但是其对象不再可以访问\n\n-   保护继承 ：基类的公有和保护，到这都成了保护成员，类内可以访问，但对象不能\n\n派生类的构成：\n\n-   吸收基类成员\n\n-   改造基类成员\n\n    -   增加同名成员，基类成员被覆盖（重新定义继承的成员函数必须用虚函数）\n\n-   添加新成员\n\n### **类型转换：**\n\n基类和派生类之间：\n  \n派生类的对象可以隐含转换为基类对象；\n\n派生类的对象可以初始化基类的引用；\n\n派生类的指针可以隐含转换为基类的指针；\n\n### **派生类的构造函数：**\n\n默认情况下，基类的构造函数不被继承，派生类需要自己构造\n\nc++11，using语句继承基类构造函数\n\n### **派生类的复制构造函数：**\n\n### **派生类的析构函数：**\n\n### **虚基类：**\n\n## **多态性**\n\n### **运算符重载：**\n\n\t//双目运算符\n\t函数类型 operator 运算符（参数）  \n\t{\n\t    // 参数个数 = 原操作数个数 - 1\n\t}\n\t//前置单目运算符，返回引用所以可以当左值\n\t函数类型 & operator ++（无参数）  \n\t{\n\t    return * this;\n\t}\n\t//后置单目运算符，\n\t函数类型 operator ++（参数为int类型）  \n\t{\n\t    old = *this;\n\t    ++(*this);  //调用的前置\n\t    return old;\n\t}\n\n\n-   重载为非成员函数：\n\n1.  列出所有操作数\n\n2.  至少有一个自定义类型参数\n\n3.  后置单目运算，参数要增加int,但不用写形参名\n\n4.  要操作某类对象的私有成员，则可声明为该类的友元函数\n\n### **虚函数：**virtual改造基类成员，实现动态绑定；必须是非静态成员\n\n>   原理：编译时先不确定和哪个类的成员对应，在程序运行时刻，再对应；\n\n\t#include <iostream>\n\tusing namespace std;\n\tclass Base1{\n\tpublic:\n\t    virtual void display() const; //虚函数，不要用内联\n\t};\n\n\tvoid Base1::display() const{\n\t    cout << \"Base1 \" << endl;\n\t}\n\t\n\tclass Base2:public Base1{\n\tpublic:\n\t    virtual void display() const;\n\t}\n\tvoid Base2::display() const{\n\t    cout << \"Base2\" << endl;\n\t}\n\n\n### **虚析构函数：**打算通过基类指针调用某一个对象的析构函数（执行delete）\n\n### **虚表和动态绑定：**\n\n>   虚表：\n\n-   每个多态类都有虚表；\n\n-   存放各个数函数的入口地址；\n\n-   每个对象有指向当前类的虚表的指针（虚指针vptr）；\n\n>   动态绑定：\n\n-   构造函数为对象的虚指针赋值\n\n### **抽象类：**含有纯虚函数的类,不能直接定义对象\n\n>   纯虚函数：\n\n>   基类中声明的虚函数，在基类中没有定义具体的操作，要求在派生类中根据实际需求完\n\n>   成自己的版本：\n\n\tvirtual 函数类型 函数名**(**参数名**) =** 0**;**\n\n### **override 和 final :**C++11\n\noverride声明的函数，必须在基类中找到原型；\n\nfinal 不允许继承或者覆盖；\n\n\n## **模板**\n\n### **函数魔板：**整数和浮点数求绝对值，需要多次重载函数，但是用函数模板，只需要设计通用功能；\n\ntemplate\\<模板参数表\\> // 类型：class或者typename 常量：\n\n函数定义\n\n\ttemplate<typename T>\n\tT abs(T x){\n\t    return x<0?-x:x;\n\t}\n\n\n### **类模板：**\n\n\ttemplate<模板参数表>\n\tclass 类名{\n\t    类成员声明;\n\t}\n\n\t//类成员定义\n\ttemplate <模板参数表>\n\t类型名  类名<模板参数标识符列表> :: 函数名(参数表)\n\t{\n\n\t}\n\n\n### **线性群体：**按位置顺序有序排列\n\n直接访问：\n\n数组类模板：\n\n索引访问：\n\n顺序访问：\n\n链表类和结点类模板：\n\n单链表：每个结点包括数据和指针，只有一个指向后续结点的称为单链表；\n\n![](media/9167a427f849e864c5d630d0c0bc3163.png)\n\n单链表结点类模板：\n\n\ttemplate <class T>\n\tclass Node{\n\t\tprivate:\n\t    \tNode<T> *next;\n\t\tpublic:\n\t    \tT data; \n\t    \tNode(const T&item,Node<T>* next = 0);  //构造函数\n\t    void insertAfter(Node<T> *p); //插入\n\t    Node<T> *deleteAfter();  //删除\n\t    Node<T> *nextNode() const; \n\t}\n\t\n\ttemplate <class T>\n\tvoid Node<T>::insertAfter(Node<T> *p){  // *p是要插入的结点\n\t// p节点的指针指向当前节点的后续结点\n\t    p->next = next; // next是原链表待插入位置的结点的指针\n\t    next = p;  \n\t}\n\ttemplate <class T>\n\tNode<T> *deleteAfter(){\n\t    Node<T> * tempPtr = next;\n\t    if (next == NULL)  //判断是否是删除最后的元素\n\t        return 0;\n\t    next = tempPtr = next;\n\t    return tempPtr;\n\t}\n\n\n>   插入：\n\n![](media/85d072d9c8a8366378b00b9af8ca4920.png)\n\n>   头插法：可以当队列\n\n>   尾插法：栈\n\n>   删除：\n\n![](media/ffdd5c0226d2a3f9a7833379eb0ebf90.png)\n\n待查询：\n\nexplicit关键字\n\n构造函数 explicit可以抑制内置类型隐式转换\n\n\n## **泛型设计**\n\n基本概念：\n\n编写不依赖具体数据类型的程序，通用的；\n\nSTL简介：(Standard Template Library)\n\nC++ string类库入门：\n\n    #include <iostream>\n\n    #include <string>\n\n    using namespace std;\n\n    int main()\n    {\n\n        // 构造函数：\n\t    string str1 = \"Yesterday\";\n\t\n\t    string str2(\"Today\");\n\t\n\t    string str3(\"Hello\",2); //取c风格字符串 长度为 2 作为初值，即\"He\"\n\t\n\t    string str4(str1, 6); // 始于位置6开始的字符串，即\"day\"\n\t\n\t    string str5(str1,6,1); // 始于6，长度1，即\"d\"\n\t\n\t\tstring str6(1,'a'); //6个'a'\n\t\t\n\t\t// 赋值，交换\n\t\tstr1.assign(\"hahahaha\"); //重新赋值\n\t\t\n\t\tswap(str1,str2); //交换两个字符串内容 str1=\"Today\" str2=\"hahahaha\"\n\t\t\n\t\t// 追加\n\t\tstr1 += \" we\"; // += 可追加 string对象，字符串，字符\n\t\t\n\t\tstr1.append(\" ar\"); // append 可追加 string对象，字符串\n\t\t\n\t\tstr1.push_back('e'); //push_back 只能追加字符 str1 = \"Today we are\"\n\n\t\t// 插入\n\t\tstr1.insert(0,\" family\"); //str1 = \"Today we are family\"\n\t\t\n\t\t// 删除\n\t\tstr1.erase(2,1); //第2个位置开始， len = 1 个字符\n\n\t\tstr1.clear(); //删除全部\n\t\t\n\t\t// 访问字符串\n\t\tstring s = \"asdfgh\";\n\t\t\n\t\tcout << s[1]; // 's'\n\t\t\n\t\tcout << s.at(2); // 'd'\n\t\t\n\t\t// 查找\n\t\tint position = s.find('f',0); // 从0开始查找第一次出现‘f’的坐标\n\t\t\n\t\t// 替换\n\t\ts.replace(s.find('f'),3,\"ZZZ\"); //替换find的位置处\n\t\t3个字符串为 “ZZZ”\n\t\t\n\t\t// 分割\n\t\tgetchar();\n\t\t\n\t\treturn 0;\n\n\t}\n","source":"_posts/C-梳理笔记.md","raw":"---\ntitle: C++梳理笔记\ndate: 2019-01-20 20:30:39\ncategories: C++\ntags: C++\ncopyright: \npassword: 123456\ntop:\n---\n\n<font color=\"red\"><big>测试内容</big></font>\n\n\n~~删除线~~\n\n[链接](http://zhuzhuyule.xyz)\n\n![logo](图片测试！/test.jpg)\n\n# C++学习笔记\n\n## **类型转换：**\n\n1. 隐式转换： 低类型转换为高类型\n\n       浮点数（直接舍掉小数，不四舍五入） + 整数\n\n2. 显式转换：\n\n    \tint **(**z**) = (**int**)** z **= static_cast\\<**int**\\> (**z**)**\n\n。。。\n\n### **数据的输入和输出：信息的流动**\n\n 1. 输入：\n\n 2. 输出：\n\n 3. 流类库的操纵符：\n\n### **程序控制：**\n\n\t\tif, while, for, do-while , break, continue, { switch,case,default } ;\n1. do-while:\n\n\t    do 语句      // 先执行一次\n\t    while(表达式)；\n\n2. for的范围，遍历容器：\n\n\n### **自定义类型：**\n\n* 类型别名： \n\n\n  1. typedef double Area, V;\n\n  2. using Area = double\n\n\n\n\n* 枚举类型： 有限的个数\n\n　　　　不限定作用域： enum 类型名 { 变量值列表}\n\n　　　　限定作用域：\n\n　　　注：枚举元素是常量，不能赋值\n\n　　　　　枚举元素有默认值，默认0,1,2,3,4，声明时可以另外指定\n\n　　　　　可以进行关系运算\n\n* auto类型 和decltyoe类型\n\t\t\n\t\t    decltype( float( i )) j = 2;   // j值是2，类型是float;\n\t\t\n\t\t    auto m = 2.5;  // m 为float;\n\n* 结构体( C语言中的)： struct\n\n\t\t\tstruct MyTimeStruct{   //定义 结构体类型\n\t\t\t    unsigned int year,mouth,day,hour,min,sec;\n\t\t\t};\n\n\n\n## **函数： 可重用的功能模块（定义和调用）**\n\n### **函数定义：**\n\n　　形参不占用空间，调用时分配；\n\n### **函数调用：**\n\n　　调用前要函数声明： int sum**(** int a**,** int b**);**\n\n　　1. 函数的嵌套调用：\n\n　　2. 函数的递归调用： 直接或者间接调用自身\n\n计算n!\n\n\t\tunsigned int fac( unsigned int n){\n\t\t    if (n == 0) return 1;\n\t\t    return fac( n - 1) * n;\n\t\t}\n\n汉诺塔\n\n\t\t分析：\n\t\t1.\tA 上的n-1个盘子移动到B上（借助C）;\n\t\t2.\tA上剩下的盘子移动到C上；\n\t\t3.\tB上的n-1个盘子移动到C上（借助A）\n\t\tvoid move(char src, char obj)\n\t\t{\n\t\t    cout << src << \"--->>>\" << obj << endl;\n\t\t}\n\t\t\n\t\tvoid hanoi(int n, char src, char medium, char obj)\n\t\t{\n\t\t    if(n == 1)\n\t\t        move(src, obj);\n\t\t    else{\n\t\t        hanoi(n-1, src, obj, medium);\n\t\t        move(src, obj);\n\t\t        hanoi(n-1, medium, src, obj);\n\t\t    }\n\t\t}\n\n\n### **函数的参数：**\n\n1. 形参不占用空间，调用时分配；\n\n2. 计算结果返回多个（利用引用）\n\n3. 多个参数时，从后开始传\n\n### **引用类型（&）：** 必须初始化，该类型不可改变，是其他变量的别名\n\t\n\t\tint i, j;\n\t\tint & ri = i;  // 定义int引用类型变量 ri, 初始化为i的引用\n\n\n### **含有可变参数的函数：（两种方法）**\n\n1. 所有实参类型相同：`initializer_list<int> li; //类模板, 都是常量`\n\n2. 具体看第九章\n\n3. 类型不同：\n\n### **内联函数（inline）： **用函数体内的语句，替换函数调用表达式，编译时完成，类似 #define\n\n声明： `inline int calArea(int a){  }`\n\n要求： 1. 不能有循环，switch语句 2. 定义在调用之前 3. 不能有异常接口声明\n\n###  constexpr 函数：（常量表达式函数）\n\n\n### **带默认参数的函数：**\n\n\t\tint getVa(int length, int weight = 2)\n\n### **函数的重载：**（C++多态性的重要机制，编译过程中实现）\n\n函数体同名，参数类型不同/参数个数不同\n\n\t\tint add(int x, int y);\n\n\t\tfloat add(float x, float y);\n\n\t\tfloat add(float x, float y, float z);\n\n\n### **C++系统函数：**\n\n\t\t#include <cmath>\n\t\t\t|_\n\t\t\t|_\n\t\t#include <cstdlib>\n\t\t\t|_\n\t\t\t|_\n\t\t#include <cstdio>\n\t\t\t|_\n\t\t\t|_\n\t\t#include <ctime>\n\t\t\t|_\n\t\t\t|_\n\n\n\n## **类和对象**\n\n类：构建对象的蓝图，\n\n对象：由类创建，含有数据和方法\n\n封装：对数据和操作数据的方法的组合绑定\n\n继承：在已有类基础上，形成新的类\n\n多态：\n\n构造函数：定义对象时，通过构造函数初始化\n\n析构函数：删除对象时，通过析构函数释放资源\n\n### ** 类和对象的定义：**\n\n定义类：\n\n\t\tclass {  //类名称 \n\t\t    public:\n\t\t        // 公有成员,外部接口\n\t\t    private:\n\t\t        // 私有成员\n\t\t    protected:\n\t\t        int hour = 0; // 类内初始化\n\t\t        // 保护型成员\n\t\t}\n\n\n注意：不指定类型，默认为私有；\n\n### **成员函数：**\n\t\t\n\t\t|_ 内联成员函数： 类内声明或者inline关键字\n\n\t\t|_类外实现：void 类名称::成员函数名称（）{ }\n\n### **构造函数：**\n\n-  在创建对象时，自动调用来初始化数据\n\n-  与类名相同\n\n-  构造函数有初始化列表\n\n-  格式 类名（string s, lei i）：s(初始值)，i(初始值){ }；\n\n### **委托构造函数：**一个构造函数 通过另一个构造函数 初始化\n\n### **复制构造函数：**\n\n用途：\n\n-   用存在的对象 去初始化新对象 （通过引用旧的对象）\n\n-   函数f的形参是类的对象，调用f时，将用实参对象初始化形参对象\n\n-   函数g的返回值是类的对象，用return的对象来在主调函数中初始化一个无名对象\n\n### **析构函数：**生存期结束，删除清理工作，不能有return，不能有参数\n\n\t    class 类名{\n\n\t    public:\n\t        类名（形参）； // 构造函数\n\t        类名（const 类名& 旧对象名）；  // 复制构造函数 =delete是不生成\n\t\t\t~ 类名（）；\n\t    }\n\n\n>   注：未声明时，编译器自己生成一个默认的\n\n### **前向引用声明：**两个类相互引用时，某个类在引用之前就声明\n\n\t    class A;  //前向引用声明，只是一个标识符，不是万能的\n\t    class B{\n\t    public:\n\t        void A(B b);\n\t    }\n\n\t    class A{\n\t    public：\n\t        void B（A a）;\n\t    }\n\n\n### **结构体：**特殊的类，默认是公有的，可以有函数成员\n\n\t    //公有成员\n\t        int a;\n\t    protected:\n\t        int b;\n\t    private:\n\t        int c;\n\t    };\n\n\n### **联合体：**\n\n目的：存储空间的共用，成员不能同时有效，比如某人语文课成绩，只有一种可能；\n\t\t\n\t\tunion Mark{ // 成绩的联合体， 只有一个成立\n\t\t    char grade;  //等级类的成绩\n\t\t    bool pass;  // 是否通过的成绩\n\t\tint percent;  //百分制成绩  }\n\n### **枚举类：**\n\nenum class 枚举类型名： 底层类型（int）**{** 枚举列表 **};**\n\n    //默认 int\n\n优势：\n\n-   强制作用域 --必须在枚举类 枚举类型名：：枚举值，不同枚举类可以有同名值了\n\n-   转换限制 --枚举对象不能与整型 隐式转换\n\n-   底层类型 --可以指定\n\n\n## **数据共享和保护：**\n\n### **作用域分类：**\n\n函数原型作用域：\n\n- 形参的范围在（）内，所以不需要名字也行，int area( int );\n\n局部作用域\n\n- 函数{ }内\n\n- if、for、while { }内\n\n类作用域： 类外访问类的成员\n\n- 静态成员：通过 对象名.成员名 访问\n\n- 非静态成员：\n\n- 文件作用域\n\n- 命名空间作用域： 10章\n\n### **对象的生存期：**\n\n静态生存期： 整个程序结束后消失\n\n- 函数内的静态对象， 用static ，全局寿命，只局部可见\n\n动态生存期：\n\n- 离开作用域后消失\n\n- 下次进函数重新生成对象\n\n### **类的静态数据成员：**\n\n- static 声明\n\n- 为该类所有对象共享，具有静态生存期\n\n- 必须在类外定义和初始化，类内声明，用：：指明所属于的类\n\n比如记录 类产生了多少对象；opencv中的Mat对象好像用到了？？？？\n\n\t\tclass base{   \n\t\t    public :   \n\t\t           static   int   _num;//声明   \n\t\t};   \n\t\tint  base::_num=0;  //真正定义  \n\n\n### **类的友元：**\n\n- 破坏数据封装和数据隐藏的机制\n\n- 尽量不用\n\n### ** 友元函数：**\n\n- 类声明中由关键字 friend 修饰说明的非成员函数\n\n- 可以在其函数体内访问对象的private,protected成员\n\n- 但必须通过对象名：：访问，函数参数为类的引用\n-   \n### ** 友元类：**\n\n\t\tclass A{\n\t\t    friend B;\n\t\t  public:\n\t\t    void display(){\n\t\t        count << x << enld;\n\t\t    }\n\t\t  private:\n\t\t    int x;\n\t\t}\n\t\t\n\t\tclass B{\n\t\t  public:\n\t\t    void set(int i);\n\t\t    void display();\n\t\t  private:\n\t\t    A a;\n\t\t}\n\t\t\n\t\tvoid B::set(int i){\n\t\t    a.x = i;   // B类中改变 A类私有值\n\t\t}\n\t\tvoid B::display(){\n\t\t    a.display()\n\t\t}\n\n\n### **共享数据的保护：**\n\n#**常类型：**const\n\n常对象：必须初始化，不可更新\n\n\t\tclass A{\n\t\t}\n\t\tA const a; // a是常对象\n\n\n常成员：(不可以放在构造函数体内复制，可以在初始化列表中)\n\n\t\tA：：A(int i):a(i){ }\n\n- 常数据成员：const修饰的\n\n- 静态常数据成员： static const int b;\n\n- 常函数成员（用来处理常对象的函数）\n\n    - 不更新对象的数据成员\n\n    - 声明和实现都带const\n\n\n\t\t\tclass A{\n\t\t\t    void f（int a）const;\n\t\t\t}\n\t\t\tvoid A::f(int a) const{  \n\t\t\t}; // f是常对象函数, 处理常对象\n\n\n- 常引用：不可更新\n\n　　　引用是双向传递的，避免修改原值的方法就是常引用；\n\n         const A& a;\n\n- 常数组：\n\n- 常指针：\n\n### **多文件结构和预编译命令：**\n\n- .h 系统使用\n\n- .hpp 个人使用(类的声明,函数的声明)\n\n- .cpp (类的实现，函数的实现)\n\n   ![](media/f5d645ed218d5fa3e753f771b72310fc.png)\n\n### **外部变量：**\n\n文件作用域中定义的变量默认是外部变量，其他文件使用前，extern声明\n\n将变量和函数限制在编译单元内：namespcae:\n\n\t\tnamespace{ //匿名的命名空间，外部不可调用任何东西\n\t\t    int i;\n\t\t    void fun(){\n\t\t        i++;\n\t\t    }\n\t\t}\n\n\n### **预编译命令：**\n\n\t\t#include< >  标准方式搜索，从系统目录include\n\n\n\t\t#include”” 先当前目录搜索，没有再标准搜索\n\n\n\t\t#define \n\n\n\t\t#undef 删除有#define的宏\n\n\t\t#if 表达式  // 条件编译指令\n\t\t---\n\t\t#else\n\t\t---\n\t\t#endif \n\n\n\t\t#ifndef 标识符\n\t\t---\n\t\t#else  \n\t\t---\n\t\t#endif\n\n\n\n## **数组，指针与字符串：**\n\n### **数组：**\n\n定义： `int arr**[**m**][**n**]**…;`\n\n　　注：二维数组中 arr[1] 第二行首地址\n\n### **数组作为函数参数：**\n\n　　数组名做参数： 形参，实参都是数组名，传入的是地址\n\n### **对象数组：**\n\n　　定义：类名 数组名[对象元素个数]\n\n　　访问：数组名[下标].成员名\n\n### **基于范围的for循环：**c++11,自动遍历整个容器\n\n\t  for( auto x : 容器){ } for( auto &x : 容器){ }\n\n注意：\n\n- auto &x是元素引用，auto x是元素的副本\n\n- auto推导出的类型是容器中的值类型\n\n- ：冒号后的表达式只执行一次\n\n### **指针：**\n\n### **定义：**\n\n\t\tstatic int i;\n\t\t\n\t\tstatic int * p = &I;\n\n### **指针的初始化和赋值：**\n\n### **指针的算术运算，关系运算：**\n\n### **指针数组：**\n\n        类名  *p[2];\n\n### **指向数组的指针：**\n\n        int **p; 指向二维数组的指针\n\n### **指针与函数：**\n\n- 指针做参数：大批量数据提高效率\n\n- 指针类型的函数：返回类型是指针\n\n\t\tint * function(int i){return 全局或者静态的 }；// 不能返回非静态局部变量\n\n-  指向函数的指针：实现函数回调的功能\n\n>   定义： 数据类型 (\\*f)(参数表);\n\n>   数据类型：返回值\n\n-   对象指针：\n\n>   定义： 类名 \\*对象指针名 = & 对象；\n\n>   访问对象： 对象指针名-\\>成员名\n\n（\\*对象指针名）.成员名\n\n- this 指针：成员函数的一个隐士参数，初始化为对象的地址，不可改变\n\n- 隐含于类的每个非静态成员函数中\n\n- 指出成员函数所操作的当前的对象\n\n- \\*this 是当前对象地址\n\n### **动态内存分配：**\n\nnew** 类型名 **(**初始化列表**) // 返回首字节地址\n\ndelete 指针p //p一直在，删除的只是p指向的对象申请的空间\n\n动态数组：\nnew 类型名[数组长度]\n\ndelete[] 数组首地址p指针\n\n### **智能指针：**C++11\n\n### **内存管理**\n\n-   unique_ptr:\n\n    -   不允许多个指针共享资源，标准库中move可以转移指针，但原来指针会失效\n\n-   shared_ptr:\n\n    -   多指针共享\n\n-   weak_ptr:\n\n    -   可复制共享\n\n>   Vector对象：类模板\n\n优势：\n\n-   封装任何形式的动态数组，自动创建，删除\n\n-   下标越界检查\n\n定义： vector <元素类型> object（长度）\n\n- `object.begin()  object.end()  object.size()`\n\n- auto 遍历vector `for(auto e: object);`\n\n### **对象的复制和移动：**\n\n-   浅层复制和深层复制：复制对象用到复制构造函数，默认的复制构造只传递了指针，两个变量指向同一块内存，释放其中一个，再释放第二个会出错；\n\n    -   浅层：实现对象间数据一一对应的复制，但两个对象指向同一内存\n\n    -   深层：当对象成员是指针类型，应该对指针所指对象进行复制。\n\n>   类名**::**类名**(**const 类名**&** v**){**\n\n>   size **=** v**.**size**;**\n\n>   data_ptr **= new** Ponit**[**size**];**\n\n>   **for(**int i**=**0**;** i **\\<** size**; ++**i**){**\n\n>   data_ptr**[**i**] =** v**.**data_ptr**[**i**];**\n\n>   **}**\n\n>   **}**\n\n-   移动构造：C++11,省去了构造和删除临时对象的过程\n\n    ![](media/8c3092d99bcdba78edeb2d8123270ffe.png)\n\n>   class_name**(**class_name **&&**old**)::**xptr**(**old**.**xptr**){**\n\n>   n**.**xptr **= NULL;** // 原来的指针清空\n\n>   **}**\n\n### **C风格字符串：**字符数组\n\n### **string类：**\n\n常用构造函数：\n\n-   string(); //默认构造，长度为0\n\n    -   string s1**;**\n\n-   string(const char \\*s) //指针s所指向的字符串常量初始化该对象\n\t\n\t\tstring s2 = “abc”;\n\t\t\n\t\tstring(const string &rhs) //复制构造函数\n\t\t\n\t\tstring s3 = s2;\n\n访问：下标访问\n\n整行字符串的输入： cin 被空格隔开\n\ngetline(cin,s2); //包含\\#include\\<string\\>\n\ngetline(cin,s2,’,’);\n\n\n## **继承和派生：** 充分利用原有的\n\n继承：保持已有类的特征来构造新类\n\n派生：在已有类基础上新增自己的特性\n\n基类：父类\n\n派生类：子类\n\n直接基类和间接基类\n\n单继承：\n\n\tclass 派生类名：继承方式 基类名{  //继承方式，\n\t    成员声明；//新增成员的声明\n\t}\n\n\n多继承：\n\n\tclass 派生类名：继承方式1 基类1，继承方式2 基类2{\n    \t成员声明；\n\t}\n\n\n### **继承的方式：**\n\n控制：派生类对基类成员的访问权限\n\n-   公有继承 public\n\n>   基类中的pubilc和protected访问属性在派生类中不变\n\n>   基类的pravate不可被对象直接访问\n\n-   私有继承 ：内部可以访问基类的公有和保护成员，但是其对象不再可以访问\n\n-   保护继承 ：基类的公有和保护，到这都成了保护成员，类内可以访问，但对象不能\n\n派生类的构成：\n\n-   吸收基类成员\n\n-   改造基类成员\n\n    -   增加同名成员，基类成员被覆盖（重新定义继承的成员函数必须用虚函数）\n\n-   添加新成员\n\n### **类型转换：**\n\n基类和派生类之间：\n  \n派生类的对象可以隐含转换为基类对象；\n\n派生类的对象可以初始化基类的引用；\n\n派生类的指针可以隐含转换为基类的指针；\n\n### **派生类的构造函数：**\n\n默认情况下，基类的构造函数不被继承，派生类需要自己构造\n\nc++11，using语句继承基类构造函数\n\n### **派生类的复制构造函数：**\n\n### **派生类的析构函数：**\n\n### **虚基类：**\n\n## **多态性**\n\n### **运算符重载：**\n\n\t//双目运算符\n\t函数类型 operator 运算符（参数）  \n\t{\n\t    // 参数个数 = 原操作数个数 - 1\n\t}\n\t//前置单目运算符，返回引用所以可以当左值\n\t函数类型 & operator ++（无参数）  \n\t{\n\t    return * this;\n\t}\n\t//后置单目运算符，\n\t函数类型 operator ++（参数为int类型）  \n\t{\n\t    old = *this;\n\t    ++(*this);  //调用的前置\n\t    return old;\n\t}\n\n\n-   重载为非成员函数：\n\n1.  列出所有操作数\n\n2.  至少有一个自定义类型参数\n\n3.  后置单目运算，参数要增加int,但不用写形参名\n\n4.  要操作某类对象的私有成员，则可声明为该类的友元函数\n\n### **虚函数：**virtual改造基类成员，实现动态绑定；必须是非静态成员\n\n>   原理：编译时先不确定和哪个类的成员对应，在程序运行时刻，再对应；\n\n\t#include <iostream>\n\tusing namespace std;\n\tclass Base1{\n\tpublic:\n\t    virtual void display() const; //虚函数，不要用内联\n\t};\n\n\tvoid Base1::display() const{\n\t    cout << \"Base1 \" << endl;\n\t}\n\t\n\tclass Base2:public Base1{\n\tpublic:\n\t    virtual void display() const;\n\t}\n\tvoid Base2::display() const{\n\t    cout << \"Base2\" << endl;\n\t}\n\n\n### **虚析构函数：**打算通过基类指针调用某一个对象的析构函数（执行delete）\n\n### **虚表和动态绑定：**\n\n>   虚表：\n\n-   每个多态类都有虚表；\n\n-   存放各个数函数的入口地址；\n\n-   每个对象有指向当前类的虚表的指针（虚指针vptr）；\n\n>   动态绑定：\n\n-   构造函数为对象的虚指针赋值\n\n### **抽象类：**含有纯虚函数的类,不能直接定义对象\n\n>   纯虚函数：\n\n>   基类中声明的虚函数，在基类中没有定义具体的操作，要求在派生类中根据实际需求完\n\n>   成自己的版本：\n\n\tvirtual 函数类型 函数名**(**参数名**) =** 0**;**\n\n### **override 和 final :**C++11\n\noverride声明的函数，必须在基类中找到原型；\n\nfinal 不允许继承或者覆盖；\n\n\n## **模板**\n\n### **函数魔板：**整数和浮点数求绝对值，需要多次重载函数，但是用函数模板，只需要设计通用功能；\n\ntemplate\\<模板参数表\\> // 类型：class或者typename 常量：\n\n函数定义\n\n\ttemplate<typename T>\n\tT abs(T x){\n\t    return x<0?-x:x;\n\t}\n\n\n### **类模板：**\n\n\ttemplate<模板参数表>\n\tclass 类名{\n\t    类成员声明;\n\t}\n\n\t//类成员定义\n\ttemplate <模板参数表>\n\t类型名  类名<模板参数标识符列表> :: 函数名(参数表)\n\t{\n\n\t}\n\n\n### **线性群体：**按位置顺序有序排列\n\n直接访问：\n\n数组类模板：\n\n索引访问：\n\n顺序访问：\n\n链表类和结点类模板：\n\n单链表：每个结点包括数据和指针，只有一个指向后续结点的称为单链表；\n\n![](media/9167a427f849e864c5d630d0c0bc3163.png)\n\n单链表结点类模板：\n\n\ttemplate <class T>\n\tclass Node{\n\t\tprivate:\n\t    \tNode<T> *next;\n\t\tpublic:\n\t    \tT data; \n\t    \tNode(const T&item,Node<T>* next = 0);  //构造函数\n\t    void insertAfter(Node<T> *p); //插入\n\t    Node<T> *deleteAfter();  //删除\n\t    Node<T> *nextNode() const; \n\t}\n\t\n\ttemplate <class T>\n\tvoid Node<T>::insertAfter(Node<T> *p){  // *p是要插入的结点\n\t// p节点的指针指向当前节点的后续结点\n\t    p->next = next; // next是原链表待插入位置的结点的指针\n\t    next = p;  \n\t}\n\ttemplate <class T>\n\tNode<T> *deleteAfter(){\n\t    Node<T> * tempPtr = next;\n\t    if (next == NULL)  //判断是否是删除最后的元素\n\t        return 0;\n\t    next = tempPtr = next;\n\t    return tempPtr;\n\t}\n\n\n>   插入：\n\n![](media/85d072d9c8a8366378b00b9af8ca4920.png)\n\n>   头插法：可以当队列\n\n>   尾插法：栈\n\n>   删除：\n\n![](media/ffdd5c0226d2a3f9a7833379eb0ebf90.png)\n\n待查询：\n\nexplicit关键字\n\n构造函数 explicit可以抑制内置类型隐式转换\n\n\n## **泛型设计**\n\n基本概念：\n\n编写不依赖具体数据类型的程序，通用的；\n\nSTL简介：(Standard Template Library)\n\nC++ string类库入门：\n\n    #include <iostream>\n\n    #include <string>\n\n    using namespace std;\n\n    int main()\n    {\n\n        // 构造函数：\n\t    string str1 = \"Yesterday\";\n\t\n\t    string str2(\"Today\");\n\t\n\t    string str3(\"Hello\",2); //取c风格字符串 长度为 2 作为初值，即\"He\"\n\t\n\t    string str4(str1, 6); // 始于位置6开始的字符串，即\"day\"\n\t\n\t    string str5(str1,6,1); // 始于6，长度1，即\"d\"\n\t\n\t\tstring str6(1,'a'); //6个'a'\n\t\t\n\t\t// 赋值，交换\n\t\tstr1.assign(\"hahahaha\"); //重新赋值\n\t\t\n\t\tswap(str1,str2); //交换两个字符串内容 str1=\"Today\" str2=\"hahahaha\"\n\t\t\n\t\t// 追加\n\t\tstr1 += \" we\"; // += 可追加 string对象，字符串，字符\n\t\t\n\t\tstr1.append(\" ar\"); // append 可追加 string对象，字符串\n\t\t\n\t\tstr1.push_back('e'); //push_back 只能追加字符 str1 = \"Today we are\"\n\n\t\t// 插入\n\t\tstr1.insert(0,\" family\"); //str1 = \"Today we are family\"\n\t\t\n\t\t// 删除\n\t\tstr1.erase(2,1); //第2个位置开始， len = 1 个字符\n\n\t\tstr1.clear(); //删除全部\n\t\t\n\t\t// 访问字符串\n\t\tstring s = \"asdfgh\";\n\t\t\n\t\tcout << s[1]; // 's'\n\t\t\n\t\tcout << s.at(2); // 'd'\n\t\t\n\t\t// 查找\n\t\tint position = s.find('f',0); // 从0开始查找第一次出现‘f’的坐标\n\t\t\n\t\t// 替换\n\t\ts.replace(s.find('f'),3,\"ZZZ\"); //替换find的位置处\n\t\t3个字符串为 “ZZZ”\n\t\t\n\t\t// 分割\n\t\tgetchar();\n\t\t\n\t\treturn 0;\n\n\t}\n","slug":"C-梳理笔记","published":1,"updated":"2019-01-24T05:11:28.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjraa7k1n000jz0qzt2q5l45s","content":"<font color=\"red\"><big>测试内容</big></font>\n\n\n<p><del>删除线</del></p>\n<p><a href=\"http://zhuzhuyule.xyz\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p><img src=\"/2019/01/20/C-梳理笔记/test.jpg\" alt=\"logo\"></p>\n<h1 id=\"C-学习笔记\"><a href=\"#C-学习笔记\" class=\"headerlink\" title=\"C++学习笔记\"></a>C++学习笔记</h1><h2 id=\"类型转换：\"><a href=\"#类型转换：\" class=\"headerlink\" title=\"类型转换：\"></a><strong>类型转换：</strong></h2><ol>\n<li><p>隐式转换： 低类型转换为高类型</p>\n<pre><code>浮点数（直接舍掉小数，不四舍五入） + 整数\n</code></pre></li>\n<li><p>显式转换：</p>\n<pre><code>int **(**z**) = (**int**)** z **= static_cast\\&lt;**int**\\&gt; (**z**)**\n</code></pre></li>\n</ol>\n<p>。。。</p>\n<h3 id=\"数据的输入和输出：信息的流动\"><a href=\"#数据的输入和输出：信息的流动\" class=\"headerlink\" title=\"数据的输入和输出：信息的流动\"></a><strong>数据的输入和输出：信息的流动</strong></h3><ol>\n<li><p>输入：</p>\n</li>\n<li><p>输出：</p>\n</li>\n<li><p>流类库的操纵符：</p>\n</li>\n</ol>\n<h3 id=\"程序控制：\"><a href=\"#程序控制：\" class=\"headerlink\" title=\"程序控制：\"></a><strong>程序控制：</strong></h3><pre><code>if, while, for, do-while , break, continue, { switch,case,default } ;\n</code></pre><ol>\n<li><p>do-while:</p>\n<pre><code>do 语句      // 先执行一次\nwhile(表达式)；\n</code></pre></li>\n<li><p>for的范围，遍历容器：</p>\n</li>\n</ol>\n<h3 id=\"自定义类型：\"><a href=\"#自定义类型：\" class=\"headerlink\" title=\"自定义类型：\"></a><strong>自定义类型：</strong></h3><ul>\n<li>类型别名： </li>\n</ul>\n<ol>\n<li><p>typedef double Area, V;</p>\n</li>\n<li><p>using Area = double</p>\n</li>\n</ol>\n<ul>\n<li>枚举类型： 有限的个数</li>\n</ul>\n<p>　　　　不限定作用域： enum 类型名 { 变量值列表}</p>\n<p>　　　　限定作用域：</p>\n<p>　　　注：枚举元素是常量，不能赋值</p>\n<p>　　　　　枚举元素有默认值，默认0,1,2,3,4，声明时可以另外指定</p>\n<p>　　　　　可以进行关系运算</p>\n<ul>\n<li><p>auto类型 和decltyoe类型</p>\n<pre><code>decltype( float( i )) j = 2;   // j值是2，类型是float;\n\nauto m = 2.5;  // m 为float;\n</code></pre></li>\n<li><p>结构体( C语言中的)： struct</p>\n<pre><code>struct MyTimeStruct{   //定义 结构体类型\n    unsigned int year,mouth,day,hour,min,sec;\n};\n</code></pre></li>\n</ul>\n<h2 id=\"函数：-可重用的功能模块（定义和调用）\"><a href=\"#函数：-可重用的功能模块（定义和调用）\" class=\"headerlink\" title=\"函数： 可重用的功能模块（定义和调用）\"></a><strong>函数： 可重用的功能模块（定义和调用）</strong></h2><h3 id=\"函数定义：\"><a href=\"#函数定义：\" class=\"headerlink\" title=\"函数定义：\"></a><strong>函数定义：</strong></h3><p>　　形参不占用空间，调用时分配；</p>\n<h3 id=\"函数调用：\"><a href=\"#函数调用：\" class=\"headerlink\" title=\"函数调用：\"></a><strong>函数调用：</strong></h3><p>　　调用前要函数声明： int sum<strong>(</strong> int a<strong>,</strong> int b<strong>);</strong></p>\n<p>　　1. 函数的嵌套调用：</p>\n<p>　　2. 函数的递归调用： 直接或者间接调用自身</p>\n<p>计算n!</p>\n<pre><code>unsigned int fac( unsigned int n){\n    if (n == 0) return 1;\n    return fac( n - 1) * n;\n}\n</code></pre><p>汉诺塔</p>\n<pre><code>分析：\n1.    A 上的n-1个盘子移动到B上（借助C）;\n2.    A上剩下的盘子移动到C上；\n3.    B上的n-1个盘子移动到C上（借助A）\nvoid move(char src, char obj)\n{\n    cout &lt;&lt; src &lt;&lt; &quot;---&gt;&gt;&gt;&quot; &lt;&lt; obj &lt;&lt; endl;\n}\n\nvoid hanoi(int n, char src, char medium, char obj)\n{\n    if(n == 1)\n        move(src, obj);\n    else{\n        hanoi(n-1, src, obj, medium);\n        move(src, obj);\n        hanoi(n-1, medium, src, obj);\n    }\n}\n</code></pre><h3 id=\"函数的参数：\"><a href=\"#函数的参数：\" class=\"headerlink\" title=\"函数的参数：\"></a><strong>函数的参数：</strong></h3><ol>\n<li><p>形参不占用空间，调用时分配；</p>\n</li>\n<li><p>计算结果返回多个（利用引用）</p>\n</li>\n<li><p>多个参数时，从后开始传</p>\n</li>\n</ol>\n<h3 id=\"引用类型（-amp-）：-必须初始化，该类型不可改变，是其他变量的别名\"><a href=\"#引用类型（-amp-）：-必须初始化，该类型不可改变，是其他变量的别名\" class=\"headerlink\" title=\"引用类型（&amp;）： 必须初始化，该类型不可改变，是其他变量的别名\"></a><strong>引用类型（&amp;）：</strong> 必须初始化，该类型不可改变，是其他变量的别名</h3><pre><code>int i, j;\nint &amp; ri = i;  // 定义int引用类型变量 ri, 初始化为i的引用\n</code></pre><h3 id=\"含有可变参数的函数：（两种方法）\"><a href=\"#含有可变参数的函数：（两种方法）\" class=\"headerlink\" title=\"含有可变参数的函数：（两种方法）\"></a><strong>含有可变参数的函数：（两种方法）</strong></h3><ol>\n<li><p>所有实参类型相同：<code>initializer_list&lt;int&gt; li; //类模板, 都是常量</code></p>\n</li>\n<li><p>具体看第九章</p>\n</li>\n<li><p>类型不同：</p>\n</li>\n</ol>\n<h3 id=\"内联函数（inline）：-用函数体内的语句，替换函数调用表达式，编译时完成，类似-define\"><a href=\"#内联函数（inline）：-用函数体内的语句，替换函数调用表达式，编译时完成，类似-define\" class=\"headerlink\" title=\"内联函数（inline）： 用函数体内的语句，替换函数调用表达式，编译时完成，类似 #define\"></a><strong>内联函数（inline）： </strong>用函数体内的语句，替换函数调用表达式，编译时完成，类似 #define</h3><p>声明： <code>inline int calArea(int a){  }</code></p>\n<p>要求： 1. 不能有循环，switch语句 2. 定义在调用之前 3. 不能有异常接口声明</p>\n<h3 id=\"constexpr-函数：（常量表达式函数）\"><a href=\"#constexpr-函数：（常量表达式函数）\" class=\"headerlink\" title=\"constexpr 函数：（常量表达式函数）\"></a>constexpr 函数：（常量表达式函数）</h3><h3 id=\"带默认参数的函数：\"><a href=\"#带默认参数的函数：\" class=\"headerlink\" title=\"带默认参数的函数：\"></a><strong>带默认参数的函数：</strong></h3><pre><code>int getVa(int length, int weight = 2)\n</code></pre><h3 id=\"函数的重载：（C-多态性的重要机制，编译过程中实现）\"><a href=\"#函数的重载：（C-多态性的重要机制，编译过程中实现）\" class=\"headerlink\" title=\"函数的重载：（C++多态性的重要机制，编译过程中实现）\"></a><strong>函数的重载：</strong>（C++多态性的重要机制，编译过程中实现）</h3><p>函数体同名，参数类型不同/参数个数不同</p>\n<pre><code>int add(int x, int y);\n\nfloat add(float x, float y);\n\nfloat add(float x, float y, float z);\n</code></pre><h3 id=\"C-系统函数：\"><a href=\"#C-系统函数：\" class=\"headerlink\" title=\"C++系统函数：\"></a><strong>C++系统函数：</strong></h3><pre><code>#include &lt;cmath&gt;\n    |_\n    |_\n#include &lt;cstdlib&gt;\n    |_\n    |_\n#include &lt;cstdio&gt;\n    |_\n    |_\n#include &lt;ctime&gt;\n    |_\n    |_\n</code></pre><h2 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a><strong>类和对象</strong></h2><p>类：构建对象的蓝图，</p>\n<p>对象：由类创建，含有数据和方法</p>\n<p>封装：对数据和操作数据的方法的组合绑定</p>\n<p>继承：在已有类基础上，形成新的类</p>\n<p>多态：</p>\n<p>构造函数：定义对象时，通过构造函数初始化</p>\n<p>析构函数：删除对象时，通过析构函数释放资源</p>\n<h3 id=\"类和对象的定义：\"><a href=\"#类和对象的定义：\" class=\"headerlink\" title=\" 类和对象的定义：\"></a><strong> 类和对象的定义：</strong></h3><p>定义类：</p>\n<pre><code>class {  //类名称 \n    public:\n        // 公有成员,外部接口\n    private:\n        // 私有成员\n    protected:\n        int hour = 0; // 类内初始化\n        // 保护型成员\n}\n</code></pre><p>注意：不指定类型，默认为私有；</p>\n<h3 id=\"成员函数：\"><a href=\"#成员函数：\" class=\"headerlink\" title=\"成员函数：\"></a><strong>成员函数：</strong></h3><pre><code>|_ 内联成员函数： 类内声明或者inline关键字\n\n|_类外实现：void 类名称::成员函数名称（）{ }\n</code></pre><h3 id=\"构造函数：\"><a href=\"#构造函数：\" class=\"headerlink\" title=\"构造函数：\"></a><strong>构造函数：</strong></h3><ul>\n<li><p>在创建对象时，自动调用来初始化数据</p>\n</li>\n<li><p>与类名相同</p>\n</li>\n<li><p>构造函数有初始化列表</p>\n</li>\n<li><p>格式 类名（string s, lei i）：s(初始值)，i(初始值){ }；</p>\n</li>\n</ul>\n<h3 id=\"委托构造函数：一个构造函数-通过另一个构造函数-初始化\"><a href=\"#委托构造函数：一个构造函数-通过另一个构造函数-初始化\" class=\"headerlink\" title=\"委托构造函数：一个构造函数 通过另一个构造函数 初始化\"></a><strong>委托构造函数：</strong>一个构造函数 通过另一个构造函数 初始化</h3><h3 id=\"复制构造函数：\"><a href=\"#复制构造函数：\" class=\"headerlink\" title=\"复制构造函数：\"></a><strong>复制构造函数：</strong></h3><p>用途：</p>\n<ul>\n<li><p>用存在的对象 去初始化新对象 （通过引用旧的对象）</p>\n</li>\n<li><p>函数f的形参是类的对象，调用f时，将用实参对象初始化形参对象</p>\n</li>\n<li><p>函数g的返回值是类的对象，用return的对象来在主调函数中初始化一个无名对象</p>\n</li>\n</ul>\n<h3 id=\"析构函数：生存期结束，删除清理工作，不能有return，不能有参数\"><a href=\"#析构函数：生存期结束，删除清理工作，不能有return，不能有参数\" class=\"headerlink\" title=\"析构函数：生存期结束，删除清理工作，不能有return，不能有参数\"></a><strong>析构函数：</strong>生存期结束，删除清理工作，不能有return，不能有参数</h3><pre><code>class 类名{\n\npublic:\n    类名（形参）； // 构造函数\n    类名（const 类名&amp; 旧对象名）；  // 复制构造函数 =delete是不生成\n    ~ 类名（）；\n}\n</code></pre><blockquote>\n<p>  注：未声明时，编译器自己生成一个默认的</p>\n</blockquote>\n<h3 id=\"前向引用声明：两个类相互引用时，某个类在引用之前就声明\"><a href=\"#前向引用声明：两个类相互引用时，某个类在引用之前就声明\" class=\"headerlink\" title=\"前向引用声明：两个类相互引用时，某个类在引用之前就声明\"></a><strong>前向引用声明：</strong>两个类相互引用时，某个类在引用之前就声明</h3><pre><code>class A;  //前向引用声明，只是一个标识符，不是万能的\nclass B{\npublic:\n    void A(B b);\n}\n\nclass A{\npublic：\n    void B（A a）;\n}\n</code></pre><h3 id=\"结构体：特殊的类，默认是公有的，可以有函数成员\"><a href=\"#结构体：特殊的类，默认是公有的，可以有函数成员\" class=\"headerlink\" title=\"结构体：特殊的类，默认是公有的，可以有函数成员\"></a><strong>结构体：</strong>特殊的类，默认是公有的，可以有函数成员</h3><pre><code>//公有成员\n    int a;\nprotected:\n    int b;\nprivate:\n    int c;\n};\n</code></pre><h3 id=\"联合体：\"><a href=\"#联合体：\" class=\"headerlink\" title=\"联合体：\"></a><strong>联合体：</strong></h3><p>目的：存储空间的共用，成员不能同时有效，比如某人语文课成绩，只有一种可能；</p>\n<pre><code>union Mark{ // 成绩的联合体， 只有一个成立\n    char grade;  //等级类的成绩\n    bool pass;  // 是否通过的成绩\nint percent;  //百分制成绩  }\n</code></pre><h3 id=\"枚举类：\"><a href=\"#枚举类：\" class=\"headerlink\" title=\"枚举类：\"></a><strong>枚举类：</strong></h3><p>enum class 枚举类型名： 底层类型（int）<strong>{</strong> 枚举列表 <strong>};</strong></p>\n<pre><code>//默认 int\n</code></pre><p>优势：</p>\n<ul>\n<li><p>强制作用域 –必须在枚举类 枚举类型名：：枚举值，不同枚举类可以有同名值了</p>\n</li>\n<li><p>转换限制 –枚举对象不能与整型 隐式转换</p>\n</li>\n<li><p>底层类型 –可以指定</p>\n</li>\n</ul>\n<h2 id=\"数据共享和保护：\"><a href=\"#数据共享和保护：\" class=\"headerlink\" title=\"数据共享和保护：\"></a><strong>数据共享和保护：</strong></h2><h3 id=\"作用域分类：\"><a href=\"#作用域分类：\" class=\"headerlink\" title=\"作用域分类：\"></a><strong>作用域分类：</strong></h3><p>函数原型作用域：</p>\n<ul>\n<li>形参的范围在（）内，所以不需要名字也行，int area( int );</li>\n</ul>\n<p>局部作用域</p>\n<ul>\n<li><p>函数{ }内</p>\n</li>\n<li><p>if、for、while { }内</p>\n</li>\n</ul>\n<p>类作用域： 类外访问类的成员</p>\n<ul>\n<li><p>静态成员：通过 对象名.成员名 访问</p>\n</li>\n<li><p>非静态成员：</p>\n</li>\n<li><p>文件作用域</p>\n</li>\n<li><p>命名空间作用域： 10章</p>\n</li>\n</ul>\n<h3 id=\"对象的生存期：\"><a href=\"#对象的生存期：\" class=\"headerlink\" title=\"对象的生存期：\"></a><strong>对象的生存期：</strong></h3><p>静态生存期： 整个程序结束后消失</p>\n<ul>\n<li>函数内的静态对象， 用static ，全局寿命，只局部可见</li>\n</ul>\n<p>动态生存期：</p>\n<ul>\n<li><p>离开作用域后消失</p>\n</li>\n<li><p>下次进函数重新生成对象</p>\n</li>\n</ul>\n<h3 id=\"类的静态数据成员：\"><a href=\"#类的静态数据成员：\" class=\"headerlink\" title=\"类的静态数据成员：\"></a><strong>类的静态数据成员：</strong></h3><ul>\n<li><p>static 声明</p>\n</li>\n<li><p>为该类所有对象共享，具有静态生存期</p>\n</li>\n<li><p>必须在类外定义和初始化，类内声明，用：：指明所属于的类</p>\n</li>\n</ul>\n<p>比如记录 类产生了多少对象；opencv中的Mat对象好像用到了？？？？</p>\n<pre><code>class base{   \n    public :   \n           static   int   _num;//声明   \n};   \nint  base::_num=0;  //真正定义  \n</code></pre><h3 id=\"类的友元：\"><a href=\"#类的友元：\" class=\"headerlink\" title=\"类的友元：\"></a><strong>类的友元：</strong></h3><ul>\n<li><p>破坏数据封装和数据隐藏的机制</p>\n</li>\n<li><p>尽量不用</p>\n</li>\n</ul>\n<h3 id=\"友元函数：\"><a href=\"#友元函数：\" class=\"headerlink\" title=\" 友元函数：\"></a><strong> 友元函数：</strong></h3><ul>\n<li><p>类声明中由关键字 friend 修饰说明的非成员函数</p>\n</li>\n<li><p>可以在其函数体内访问对象的private,protected成员</p>\n</li>\n<li><p>但必须通过对象名：：访问，函数参数为类的引用</p>\n</li>\n<li><h3 id=\"友元类：\"><a href=\"#友元类：\" class=\"headerlink\" title=\" 友元类：\"></a><strong> 友元类：</strong></h3><pre><code>class A{\n    friend B;\n  public:\n    void display(){\n        count &lt;&lt; x &lt;&lt; enld;\n    }\n  private:\n    int x;\n}\n\nclass B{\n  public:\n    void set(int i);\n    void display();\n  private:\n    A a;\n}\n\nvoid B::set(int i){\n    a.x = i;   // B类中改变 A类私有值\n}\nvoid B::display(){\n    a.display()\n}\n</code></pre></li>\n</ul>\n<h3 id=\"共享数据的保护：\"><a href=\"#共享数据的保护：\" class=\"headerlink\" title=\"共享数据的保护：\"></a><strong>共享数据的保护：</strong></h3><p>#<strong>常类型：</strong>const</p>\n<p>常对象：必须初始化，不可更新</p>\n<pre><code>class A{\n}\nA const a; // a是常对象\n</code></pre><p>常成员：(不可以放在构造函数体内复制，可以在初始化列表中)</p>\n<pre><code>A：：A(int i):a(i){ }\n</code></pre><ul>\n<li><p>常数据成员：const修饰的</p>\n</li>\n<li><p>静态常数据成员： static const int b;</p>\n</li>\n<li><p>常函数成员（用来处理常对象的函数）</p>\n<ul>\n<li><p>不更新对象的数据成员</p>\n</li>\n<li><p>声明和实现都带const</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>class A{\n    void f（int a）const;\n}\nvoid A::f(int a) const{  \n}; // f是常对象函数, 处理常对象\n</code></pre><ul>\n<li>常引用：不可更新</li>\n</ul>\n<p>　　　引用是双向传递的，避免修改原值的方法就是常引用；</p>\n<pre><code>const A&amp; a;\n</code></pre><ul>\n<li><p>常数组：</p>\n</li>\n<li><p>常指针：</p>\n</li>\n</ul>\n<h3 id=\"多文件结构和预编译命令：\"><a href=\"#多文件结构和预编译命令：\" class=\"headerlink\" title=\"多文件结构和预编译命令：\"></a><strong>多文件结构和预编译命令：</strong></h3><ul>\n<li><p>.h 系统使用</p>\n</li>\n<li><p>.hpp 个人使用(类的声明,函数的声明)</p>\n</li>\n<li><p>.cpp (类的实现，函数的实现)</p>\n<p> <img src=\"/2019/01/20/C-梳理笔记/f5d645ed218d5fa3e753f771b72310fc.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"外部变量：\"><a href=\"#外部变量：\" class=\"headerlink\" title=\"外部变量：\"></a><strong>外部变量：</strong></h3><p>文件作用域中定义的变量默认是外部变量，其他文件使用前，extern声明</p>\n<p>将变量和函数限制在编译单元内：namespcae:</p>\n<pre><code>namespace{ //匿名的命名空间，外部不可调用任何东西\n    int i;\n    void fun(){\n        i++;\n    }\n}\n</code></pre><h3 id=\"预编译命令：\"><a href=\"#预编译命令：\" class=\"headerlink\" title=\"预编译命令：\"></a><strong>预编译命令：</strong></h3><pre><code>#include&lt; &gt;  标准方式搜索，从系统目录include\n\n\n#include”” 先当前目录搜索，没有再标准搜索\n\n\n#define \n\n\n#undef 删除有#define的宏\n\n#if 表达式  // 条件编译指令\n---\n#else\n---\n#endif \n\n\n#ifndef 标识符\n---\n#else  \n---\n#endif\n</code></pre><h2 id=\"数组，指针与字符串：\"><a href=\"#数组，指针与字符串：\" class=\"headerlink\" title=\"数组，指针与字符串：\"></a><strong>数组，指针与字符串：</strong></h2><h3 id=\"数组：\"><a href=\"#数组：\" class=\"headerlink\" title=\"数组：\"></a><strong>数组：</strong></h3><p>定义： <code>int arr**[**m**][**n**]**…;</code></p>\n<p>　　注：二维数组中 arr[1] 第二行首地址</p>\n<h3 id=\"数组作为函数参数：\"><a href=\"#数组作为函数参数：\" class=\"headerlink\" title=\"数组作为函数参数：\"></a><strong>数组作为函数参数：</strong></h3><p>　　数组名做参数： 形参，实参都是数组名，传入的是地址</p>\n<h3 id=\"对象数组：\"><a href=\"#对象数组：\" class=\"headerlink\" title=\"对象数组：\"></a><strong>对象数组：</strong></h3><p>　　定义：类名 数组名[对象元素个数]</p>\n<p>　　访问：数组名[下标].成员名</p>\n<h3 id=\"基于范围的for循环：c-11-自动遍历整个容器\"><a href=\"#基于范围的for循环：c-11-自动遍历整个容器\" class=\"headerlink\" title=\"基于范围的for循环：c++11,自动遍历整个容器\"></a><strong>基于范围的for循环：</strong>c++11,自动遍历整个容器</h3><pre><code>for( auto x : 容器){ } for( auto &amp;x : 容器){ }\n</code></pre><p>注意：</p>\n<ul>\n<li><p>auto &amp;x是元素引用，auto x是元素的副本</p>\n</li>\n<li><p>auto推导出的类型是容器中的值类型</p>\n</li>\n<li><p>：冒号后的表达式只执行一次</p>\n</li>\n</ul>\n<h3 id=\"指针：\"><a href=\"#指针：\" class=\"headerlink\" title=\"指针：\"></a><strong>指针：</strong></h3><h3 id=\"定义：\"><a href=\"#定义：\" class=\"headerlink\" title=\"定义：\"></a><strong>定义：</strong></h3><pre><code>static int i;\n\nstatic int * p = &amp;I;\n</code></pre><h3 id=\"指针的初始化和赋值：\"><a href=\"#指针的初始化和赋值：\" class=\"headerlink\" title=\"指针的初始化和赋值：\"></a><strong>指针的初始化和赋值：</strong></h3><h3 id=\"指针的算术运算，关系运算：\"><a href=\"#指针的算术运算，关系运算：\" class=\"headerlink\" title=\"指针的算术运算，关系运算：\"></a><strong>指针的算术运算，关系运算：</strong></h3><h3 id=\"指针数组：\"><a href=\"#指针数组：\" class=\"headerlink\" title=\"指针数组：\"></a><strong>指针数组：</strong></h3><pre><code>类名  *p[2];\n</code></pre><h3 id=\"指向数组的指针：\"><a href=\"#指向数组的指针：\" class=\"headerlink\" title=\"指向数组的指针：\"></a><strong>指向数组的指针：</strong></h3><pre><code>int **p; 指向二维数组的指针\n</code></pre><h3 id=\"指针与函数：\"><a href=\"#指针与函数：\" class=\"headerlink\" title=\"指针与函数：\"></a><strong>指针与函数：</strong></h3><ul>\n<li><p>指针做参数：大批量数据提高效率</p>\n</li>\n<li><p>指针类型的函数：返回类型是指针</p>\n<pre><code>int * function(int i){return 全局或者静态的 }；// 不能返回非静态局部变量\n</code></pre></li>\n<li><p>指向函数的指针：实现函数回调的功能</p>\n</li>\n</ul>\n<blockquote>\n<p>  定义： 数据类型 (*f)(参数表);</p>\n</blockquote>\n<blockquote>\n<p>  数据类型：返回值</p>\n</blockquote>\n<ul>\n<li>对象指针：</li>\n</ul>\n<blockquote>\n<p>  定义： 类名 *对象指针名 = &amp; 对象；</p>\n</blockquote>\n<blockquote>\n<p>  访问对象： 对象指针名->成员名</p>\n</blockquote>\n<p>（*对象指针名）.成员名</p>\n<ul>\n<li><p>this 指针：成员函数的一个隐士参数，初始化为对象的地址，不可改变</p>\n</li>\n<li><p>隐含于类的每个非静态成员函数中</p>\n</li>\n<li><p>指出成员函数所操作的当前的对象</p>\n</li>\n<li><p>*this 是当前对象地址</p>\n</li>\n</ul>\n<h3 id=\"动态内存分配：\"><a href=\"#动态内存分配：\" class=\"headerlink\" title=\"动态内存分配：\"></a><strong>动态内存分配：</strong></h3><p>new<strong> 类型名 </strong>(<strong>初始化列表</strong>) // 返回首字节地址</p>\n<p>delete 指针p //p一直在，删除的只是p指向的对象申请的空间</p>\n<p>动态数组：<br>new 类型名[数组长度]</p>\n<p>delete[] 数组首地址p指针</p>\n<h3 id=\"智能指针：C-11\"><a href=\"#智能指针：C-11\" class=\"headerlink\" title=\"智能指针：C++11\"></a><strong>智能指针：</strong>C++11</h3><h3 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a><strong>内存管理</strong></h3><ul>\n<li><p>unique_ptr:</p>\n<ul>\n<li>不允许多个指针共享资源，标准库中move可以转移指针，但原来指针会失效</li>\n</ul>\n</li>\n<li><p>shared_ptr:</p>\n<ul>\n<li>多指针共享</li>\n</ul>\n</li>\n<li><p>weak_ptr:</p>\n<ul>\n<li>可复制共享</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>  Vector对象：类模板</p>\n</blockquote>\n<p>优势：</p>\n<ul>\n<li><p>封装任何形式的动态数组，自动创建，删除</p>\n</li>\n<li><p>下标越界检查</p>\n</li>\n</ul>\n<p>定义： vector &lt;元素类型&gt; object（长度）</p>\n<ul>\n<li><p><code>object.begin()  object.end()  object.size()</code></p>\n</li>\n<li><p>auto 遍历vector <code>for(auto e: object);</code></p>\n</li>\n</ul>\n<h3 id=\"对象的复制和移动：\"><a href=\"#对象的复制和移动：\" class=\"headerlink\" title=\"对象的复制和移动：\"></a><strong>对象的复制和移动：</strong></h3><ul>\n<li><p>浅层复制和深层复制：复制对象用到复制构造函数，默认的复制构造只传递了指针，两个变量指向同一块内存，释放其中一个，再释放第二个会出错；</p>\n<ul>\n<li><p>浅层：实现对象间数据一一对应的复制，但两个对象指向同一内存</p>\n</li>\n<li><p>深层：当对象成员是指针类型，应该对指针所指对象进行复制。</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>  类名<strong>::</strong>类名<strong>(</strong>const 类名<strong>&amp;</strong> v<strong>){</strong></p>\n</blockquote>\n<blockquote>\n<p>  size <strong>=</strong> v<strong>.</strong>size<strong>;</strong></p>\n</blockquote>\n<blockquote>\n<p>  data_ptr <strong>= new</strong> Ponit<strong>[</strong>size<strong>];</strong></p>\n</blockquote>\n<blockquote>\n<p>  <strong>for(</strong>int i<strong>=</strong>0<strong>;</strong> i <strong>\\&lt;</strong> size<strong>; ++</strong>i<strong>){</strong></p>\n</blockquote>\n<blockquote>\n<p>  data_ptr<strong>[</strong>i<strong>] =</strong> v<strong>.</strong>data_ptr<strong>[</strong>i<strong>];</strong></p>\n</blockquote>\n<blockquote>\n<p>  <strong>}</strong></p>\n</blockquote>\n<blockquote>\n<p>  <strong>}</strong></p>\n</blockquote>\n<ul>\n<li><p>移动构造：C++11,省去了构造和删除临时对象的过程</p>\n<p><img src=\"/2019/01/20/C-梳理笔记/8c3092d99bcdba78edeb2d8123270ffe.png\" alt=\"\"></p>\n</li>\n</ul>\n<blockquote>\n<p>  class_name<strong>(</strong>class_name <strong>&amp;&amp;</strong>old<strong>)::</strong>xptr<strong>(</strong>old<strong>.</strong>xptr<strong>){</strong></p>\n</blockquote>\n<blockquote>\n<p>  n<strong>.</strong>xptr <strong>= NULL;</strong> // 原来的指针清空</p>\n</blockquote>\n<blockquote>\n<p>  <strong>}</strong></p>\n</blockquote>\n<h3 id=\"C风格字符串：字符数组\"><a href=\"#C风格字符串：字符数组\" class=\"headerlink\" title=\"C风格字符串：字符数组\"></a><strong>C风格字符串：</strong>字符数组</h3><h3 id=\"string类：\"><a href=\"#string类：\" class=\"headerlink\" title=\"string类：\"></a><strong>string类：</strong></h3><p>常用构造函数：</p>\n<ul>\n<li><p>string(); //默认构造，长度为0</p>\n<ul>\n<li>string s1<strong>;</strong></li>\n</ul>\n</li>\n<li><p>string(const char *s) //指针s所指向的字符串常量初始化该对象</p>\n<pre><code>string s2 = “abc”;\n\nstring(const string &amp;rhs) //复制构造函数\n\nstring s3 = s2;\n</code></pre></li>\n</ul>\n<p>访问：下标访问</p>\n<p>整行字符串的输入： cin 被空格隔开</p>\n<p>getline(cin,s2); //包含#include\\&lt;string></p>\n<p>getline(cin,s2,’,’);</p>\n<h2 id=\"继承和派生：-充分利用原有的\"><a href=\"#继承和派生：-充分利用原有的\" class=\"headerlink\" title=\"继承和派生： 充分利用原有的\"></a><strong>继承和派生：</strong> 充分利用原有的</h2><p>继承：保持已有类的特征来构造新类</p>\n<p>派生：在已有类基础上新增自己的特性</p>\n<p>基类：父类</p>\n<p>派生类：子类</p>\n<p>直接基类和间接基类</p>\n<p>单继承：</p>\n<pre><code>class 派生类名：继承方式 基类名{  //继承方式，\n    成员声明；//新增成员的声明\n}\n</code></pre><p>多继承：</p>\n<pre><code>class 派生类名：继承方式1 基类1，继承方式2 基类2{\n    成员声明；\n}\n</code></pre><h3 id=\"继承的方式：\"><a href=\"#继承的方式：\" class=\"headerlink\" title=\"继承的方式：\"></a><strong>继承的方式：</strong></h3><p>控制：派生类对基类成员的访问权限</p>\n<ul>\n<li>公有继承 public</li>\n</ul>\n<blockquote>\n<p>  基类中的pubilc和protected访问属性在派生类中不变</p>\n</blockquote>\n<blockquote>\n<p>  基类的pravate不可被对象直接访问</p>\n</blockquote>\n<ul>\n<li><p>私有继承 ：内部可以访问基类的公有和保护成员，但是其对象不再可以访问</p>\n</li>\n<li><p>保护继承 ：基类的公有和保护，到这都成了保护成员，类内可以访问，但对象不能</p>\n</li>\n</ul>\n<p>派生类的构成：</p>\n<ul>\n<li><p>吸收基类成员</p>\n</li>\n<li><p>改造基类成员</p>\n<ul>\n<li>增加同名成员，基类成员被覆盖（重新定义继承的成员函数必须用虚函数）</li>\n</ul>\n</li>\n<li><p>添加新成员</p>\n</li>\n</ul>\n<h3 id=\"类型转换：-1\"><a href=\"#类型转换：-1\" class=\"headerlink\" title=\"类型转换：\"></a><strong>类型转换：</strong></h3><p>基类和派生类之间：</p>\n<p>派生类的对象可以隐含转换为基类对象；</p>\n<p>派生类的对象可以初始化基类的引用；</p>\n<p>派生类的指针可以隐含转换为基类的指针；</p>\n<h3 id=\"派生类的构造函数：\"><a href=\"#派生类的构造函数：\" class=\"headerlink\" title=\"派生类的构造函数：\"></a><strong>派生类的构造函数：</strong></h3><p>默认情况下，基类的构造函数不被继承，派生类需要自己构造</p>\n<p>c++11，using语句继承基类构造函数</p>\n<h3 id=\"派生类的复制构造函数：\"><a href=\"#派生类的复制构造函数：\" class=\"headerlink\" title=\"派生类的复制构造函数：\"></a><strong>派生类的复制构造函数：</strong></h3><h3 id=\"派生类的析构函数：\"><a href=\"#派生类的析构函数：\" class=\"headerlink\" title=\"派生类的析构函数：\"></a><strong>派生类的析构函数：</strong></h3><h3 id=\"虚基类：\"><a href=\"#虚基类：\" class=\"headerlink\" title=\"虚基类：\"></a><strong>虚基类：</strong></h3><h2 id=\"多态性\"><a href=\"#多态性\" class=\"headerlink\" title=\"多态性\"></a><strong>多态性</strong></h2><h3 id=\"运算符重载：\"><a href=\"#运算符重载：\" class=\"headerlink\" title=\"运算符重载：\"></a><strong>运算符重载：</strong></h3><pre><code>//双目运算符\n函数类型 operator 运算符（参数）  \n{\n    // 参数个数 = 原操作数个数 - 1\n}\n//前置单目运算符，返回引用所以可以当左值\n函数类型 &amp; operator ++（无参数）  \n{\n    return * this;\n}\n//后置单目运算符，\n函数类型 operator ++（参数为int类型）  \n{\n    old = *this;\n    ++(*this);  //调用的前置\n    return old;\n}\n</code></pre><ul>\n<li>重载为非成员函数：</li>\n</ul>\n<ol>\n<li><p>列出所有操作数</p>\n</li>\n<li><p>至少有一个自定义类型参数</p>\n</li>\n<li><p>后置单目运算，参数要增加int,但不用写形参名</p>\n</li>\n<li><p>要操作某类对象的私有成员，则可声明为该类的友元函数</p>\n</li>\n</ol>\n<h3 id=\"虚函数：virtual改造基类成员，实现动态绑定；必须是非静态成员\"><a href=\"#虚函数：virtual改造基类成员，实现动态绑定；必须是非静态成员\" class=\"headerlink\" title=\"虚函数：virtual改造基类成员，实现动态绑定；必须是非静态成员\"></a><strong>虚函数：</strong>virtual改造基类成员，实现动态绑定；必须是非静态成员</h3><blockquote>\n<p>  原理：编译时先不确定和哪个类的成员对应，在程序运行时刻，再对应；</p>\n</blockquote>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass Base1{\npublic:\n    virtual void display() const; //虚函数，不要用内联\n};\n\nvoid Base1::display() const{\n    cout &lt;&lt; &quot;Base1 &quot; &lt;&lt; endl;\n}\n\nclass Base2:public Base1{\npublic:\n    virtual void display() const;\n}\nvoid Base2::display() const{\n    cout &lt;&lt; &quot;Base2&quot; &lt;&lt; endl;\n}\n</code></pre><h3 id=\"虚析构函数：打算通过基类指针调用某一个对象的析构函数（执行delete）\"><a href=\"#虚析构函数：打算通过基类指针调用某一个对象的析构函数（执行delete）\" class=\"headerlink\" title=\"虚析构函数：打算通过基类指针调用某一个对象的析构函数（执行delete）\"></a><strong>虚析构函数：</strong>打算通过基类指针调用某一个对象的析构函数（执行delete）</h3><h3 id=\"虚表和动态绑定：\"><a href=\"#虚表和动态绑定：\" class=\"headerlink\" title=\"虚表和动态绑定：\"></a><strong>虚表和动态绑定：</strong></h3><blockquote>\n<p>  虚表：</p>\n</blockquote>\n<ul>\n<li><p>每个多态类都有虚表；</p>\n</li>\n<li><p>存放各个数函数的入口地址；</p>\n</li>\n<li><p>每个对象有指向当前类的虚表的指针（虚指针vptr）；</p>\n</li>\n</ul>\n<blockquote>\n<p>  动态绑定：</p>\n</blockquote>\n<ul>\n<li>构造函数为对象的虚指针赋值</li>\n</ul>\n<h3 id=\"抽象类：含有纯虚函数的类-不能直接定义对象\"><a href=\"#抽象类：含有纯虚函数的类-不能直接定义对象\" class=\"headerlink\" title=\"抽象类：含有纯虚函数的类,不能直接定义对象\"></a><strong>抽象类：</strong>含有纯虚函数的类,不能直接定义对象</h3><blockquote>\n<p>  纯虚函数：</p>\n</blockquote>\n<blockquote>\n<p>  基类中声明的虚函数，在基类中没有定义具体的操作，要求在派生类中根据实际需求完</p>\n</blockquote>\n<blockquote>\n<p>  成自己的版本：</p>\n</blockquote>\n<pre><code>virtual 函数类型 函数名**(**参数名**) =** 0**;**\n</code></pre><h3 id=\"override-和-final-C-11\"><a href=\"#override-和-final-C-11\" class=\"headerlink\" title=\"override 和 final :C++11\"></a><strong>override 和 final :</strong>C++11</h3><p>override声明的函数，必须在基类中找到原型；</p>\n<p>final 不允许继承或者覆盖；</p>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a><strong>模板</strong></h2><h3 id=\"函数魔板：整数和浮点数求绝对值，需要多次重载函数，但是用函数模板，只需要设计通用功能；\"><a href=\"#函数魔板：整数和浮点数求绝对值，需要多次重载函数，但是用函数模板，只需要设计通用功能；\" class=\"headerlink\" title=\"函数魔板：整数和浮点数求绝对值，需要多次重载函数，但是用函数模板，只需要设计通用功能；\"></a><strong>函数魔板：</strong>整数和浮点数求绝对值，需要多次重载函数，但是用函数模板，只需要设计通用功能；</h3><p>template\\&lt;模板参数表> // 类型：class或者typename 常量：</p>\n<p>函数定义</p>\n<pre><code>template&lt;typename T&gt;\nT abs(T x){\n    return x&lt;0?-x:x;\n}\n</code></pre><h3 id=\"类模板：\"><a href=\"#类模板：\" class=\"headerlink\" title=\"类模板：\"></a><strong>类模板：</strong></h3><pre><code>template&lt;模板参数表&gt;\nclass 类名{\n    类成员声明;\n}\n\n//类成员定义\ntemplate &lt;模板参数表&gt;\n类型名  类名&lt;模板参数标识符列表&gt; :: 函数名(参数表)\n{\n\n}\n</code></pre><h3 id=\"线性群体：按位置顺序有序排列\"><a href=\"#线性群体：按位置顺序有序排列\" class=\"headerlink\" title=\"线性群体：按位置顺序有序排列\"></a><strong>线性群体：</strong>按位置顺序有序排列</h3><p>直接访问：</p>\n<p>数组类模板：</p>\n<p>索引访问：</p>\n<p>顺序访问：</p>\n<p>链表类和结点类模板：</p>\n<p>单链表：每个结点包括数据和指针，只有一个指向后续结点的称为单链表；</p>\n<p><img src=\"/2019/01/20/C-梳理笔记/9167a427f849e864c5d630d0c0bc3163.png\" alt=\"\"></p>\n<p>单链表结点类模板：</p>\n<pre><code>template &lt;class T&gt;\nclass Node{\n    private:\n        Node&lt;T&gt; *next;\n    public:\n        T data; \n        Node(const T&amp;item,Node&lt;T&gt;* next = 0);  //构造函数\n    void insertAfter(Node&lt;T&gt; *p); //插入\n    Node&lt;T&gt; *deleteAfter();  //删除\n    Node&lt;T&gt; *nextNode() const; \n}\n\ntemplate &lt;class T&gt;\nvoid Node&lt;T&gt;::insertAfter(Node&lt;T&gt; *p){  // *p是要插入的结点\n// p节点的指针指向当前节点的后续结点\n    p-&gt;next = next; // next是原链表待插入位置的结点的指针\n    next = p;  \n}\ntemplate &lt;class T&gt;\nNode&lt;T&gt; *deleteAfter(){\n    Node&lt;T&gt; * tempPtr = next;\n    if (next == NULL)  //判断是否是删除最后的元素\n        return 0;\n    next = tempPtr = next;\n    return tempPtr;\n}\n</code></pre><blockquote>\n<p>  插入：</p>\n</blockquote>\n<p><img src=\"/2019/01/20/C-梳理笔记/85d072d9c8a8366378b00b9af8ca4920.png\" alt=\"\"></p>\n<blockquote>\n<p>  头插法：可以当队列</p>\n</blockquote>\n<blockquote>\n<p>  尾插法：栈</p>\n</blockquote>\n<blockquote>\n<p>  删除：</p>\n</blockquote>\n<p><img src=\"/2019/01/20/C-梳理笔记/ffdd5c0226d2a3f9a7833379eb0ebf90.png\" alt=\"\"></p>\n<p>待查询：</p>\n<p>explicit关键字</p>\n<p>构造函数 explicit可以抑制内置类型隐式转换</p>\n<h2 id=\"泛型设计\"><a href=\"#泛型设计\" class=\"headerlink\" title=\"泛型设计\"></a><strong>泛型设计</strong></h2><p>基本概念：</p>\n<p>编写不依赖具体数据类型的程序，通用的；</p>\n<p>STL简介：(Standard Template Library)</p>\n<p>C++ string类库入门：</p>\n<pre><code>#include &lt;iostream&gt;\n\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n\n    // 构造函数：\n    string str1 = &quot;Yesterday&quot;;\n\n    string str2(&quot;Today&quot;);\n\n    string str3(&quot;Hello&quot;,2); //取c风格字符串 长度为 2 作为初值，即&quot;He&quot;\n\n    string str4(str1, 6); // 始于位置6开始的字符串，即&quot;day&quot;\n\n    string str5(str1,6,1); // 始于6，长度1，即&quot;d&quot;\n\n    string str6(1,&apos;a&apos;); //6个&apos;a&apos;\n\n    // 赋值，交换\n    str1.assign(&quot;hahahaha&quot;); //重新赋值\n\n    swap(str1,str2); //交换两个字符串内容 str1=&quot;Today&quot; str2=&quot;hahahaha&quot;\n\n    // 追加\n    str1 += &quot; we&quot;; // += 可追加 string对象，字符串，字符\n\n    str1.append(&quot; ar&quot;); // append 可追加 string对象，字符串\n\n    str1.push_back(&apos;e&apos;); //push_back 只能追加字符 str1 = &quot;Today we are&quot;\n\n    // 插入\n    str1.insert(0,&quot; family&quot;); //str1 = &quot;Today we are family&quot;\n\n    // 删除\n    str1.erase(2,1); //第2个位置开始， len = 1 个字符\n\n    str1.clear(); //删除全部\n\n    // 访问字符串\n    string s = &quot;asdfgh&quot;;\n\n    cout &lt;&lt; s[1]; // &apos;s&apos;\n\n    cout &lt;&lt; s.at(2); // &apos;d&apos;\n\n    // 查找\n    int position = s.find(&apos;f&apos;,0); // 从0开始查找第一次出现‘f’的坐标\n\n    // 替换\n    s.replace(s.find(&apos;f&apos;),3,&quot;ZZZ&quot;); //替换find的位置处\n    3个字符串为 “ZZZ”\n\n    // 分割\n    getchar();\n\n    return 0;\n\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<font color=\"red\"><big>测试内容</big></font>\n\n\n<p><del>删除线</del></p>\n<p><a href=\"http://zhuzhuyule.xyz\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p><img src=\"/2019/01/20/C-梳理笔记/test.jpg\" alt=\"logo\"></p>\n<h1 id=\"C-学习笔记\"><a href=\"#C-学习笔记\" class=\"headerlink\" title=\"C++学习笔记\"></a>C++学习笔记</h1><h2 id=\"类型转换：\"><a href=\"#类型转换：\" class=\"headerlink\" title=\"类型转换：\"></a><strong>类型转换：</strong></h2><ol>\n<li><p>隐式转换： 低类型转换为高类型</p>\n<pre><code>浮点数（直接舍掉小数，不四舍五入） + 整数\n</code></pre></li>\n<li><p>显式转换：</p>\n<pre><code>int **(**z**) = (**int**)** z **= static_cast\\&lt;**int**\\&gt; (**z**)**\n</code></pre></li>\n</ol>\n<p>。。。</p>\n<h3 id=\"数据的输入和输出：信息的流动\"><a href=\"#数据的输入和输出：信息的流动\" class=\"headerlink\" title=\"数据的输入和输出：信息的流动\"></a><strong>数据的输入和输出：信息的流动</strong></h3><ol>\n<li><p>输入：</p>\n</li>\n<li><p>输出：</p>\n</li>\n<li><p>流类库的操纵符：</p>\n</li>\n</ol>\n<h3 id=\"程序控制：\"><a href=\"#程序控制：\" class=\"headerlink\" title=\"程序控制：\"></a><strong>程序控制：</strong></h3><pre><code>if, while, for, do-while , break, continue, { switch,case,default } ;\n</code></pre><ol>\n<li><p>do-while:</p>\n<pre><code>do 语句      // 先执行一次\nwhile(表达式)；\n</code></pre></li>\n<li><p>for的范围，遍历容器：</p>\n</li>\n</ol>\n<h3 id=\"自定义类型：\"><a href=\"#自定义类型：\" class=\"headerlink\" title=\"自定义类型：\"></a><strong>自定义类型：</strong></h3><ul>\n<li>类型别名： </li>\n</ul>\n<ol>\n<li><p>typedef double Area, V;</p>\n</li>\n<li><p>using Area = double</p>\n</li>\n</ol>\n<ul>\n<li>枚举类型： 有限的个数</li>\n</ul>\n<p>　　　　不限定作用域： enum 类型名 { 变量值列表}</p>\n<p>　　　　限定作用域：</p>\n<p>　　　注：枚举元素是常量，不能赋值</p>\n<p>　　　　　枚举元素有默认值，默认0,1,2,3,4，声明时可以另外指定</p>\n<p>　　　　　可以进行关系运算</p>\n<ul>\n<li><p>auto类型 和decltyoe类型</p>\n<pre><code>decltype( float( i )) j = 2;   // j值是2，类型是float;\n\nauto m = 2.5;  // m 为float;\n</code></pre></li>\n<li><p>结构体( C语言中的)： struct</p>\n<pre><code>struct MyTimeStruct{   //定义 结构体类型\n    unsigned int year,mouth,day,hour,min,sec;\n};\n</code></pre></li>\n</ul>\n<h2 id=\"函数：-可重用的功能模块（定义和调用）\"><a href=\"#函数：-可重用的功能模块（定义和调用）\" class=\"headerlink\" title=\"函数： 可重用的功能模块（定义和调用）\"></a><strong>函数： 可重用的功能模块（定义和调用）</strong></h2><h3 id=\"函数定义：\"><a href=\"#函数定义：\" class=\"headerlink\" title=\"函数定义：\"></a><strong>函数定义：</strong></h3><p>　　形参不占用空间，调用时分配；</p>\n<h3 id=\"函数调用：\"><a href=\"#函数调用：\" class=\"headerlink\" title=\"函数调用：\"></a><strong>函数调用：</strong></h3><p>　　调用前要函数声明： int sum<strong>(</strong> int a<strong>,</strong> int b<strong>);</strong></p>\n<p>　　1. 函数的嵌套调用：</p>\n<p>　　2. 函数的递归调用： 直接或者间接调用自身</p>\n<p>计算n!</p>\n<pre><code>unsigned int fac( unsigned int n){\n    if (n == 0) return 1;\n    return fac( n - 1) * n;\n}\n</code></pre><p>汉诺塔</p>\n<pre><code>分析：\n1.    A 上的n-1个盘子移动到B上（借助C）;\n2.    A上剩下的盘子移动到C上；\n3.    B上的n-1个盘子移动到C上（借助A）\nvoid move(char src, char obj)\n{\n    cout &lt;&lt; src &lt;&lt; &quot;---&gt;&gt;&gt;&quot; &lt;&lt; obj &lt;&lt; endl;\n}\n\nvoid hanoi(int n, char src, char medium, char obj)\n{\n    if(n == 1)\n        move(src, obj);\n    else{\n        hanoi(n-1, src, obj, medium);\n        move(src, obj);\n        hanoi(n-1, medium, src, obj);\n    }\n}\n</code></pre><h3 id=\"函数的参数：\"><a href=\"#函数的参数：\" class=\"headerlink\" title=\"函数的参数：\"></a><strong>函数的参数：</strong></h3><ol>\n<li><p>形参不占用空间，调用时分配；</p>\n</li>\n<li><p>计算结果返回多个（利用引用）</p>\n</li>\n<li><p>多个参数时，从后开始传</p>\n</li>\n</ol>\n<h3 id=\"引用类型（-amp-）：-必须初始化，该类型不可改变，是其他变量的别名\"><a href=\"#引用类型（-amp-）：-必须初始化，该类型不可改变，是其他变量的别名\" class=\"headerlink\" title=\"引用类型（&amp;）： 必须初始化，该类型不可改变，是其他变量的别名\"></a><strong>引用类型（&amp;）：</strong> 必须初始化，该类型不可改变，是其他变量的别名</h3><pre><code>int i, j;\nint &amp; ri = i;  // 定义int引用类型变量 ri, 初始化为i的引用\n</code></pre><h3 id=\"含有可变参数的函数：（两种方法）\"><a href=\"#含有可变参数的函数：（两种方法）\" class=\"headerlink\" title=\"含有可变参数的函数：（两种方法）\"></a><strong>含有可变参数的函数：（两种方法）</strong></h3><ol>\n<li><p>所有实参类型相同：<code>initializer_list&lt;int&gt; li; //类模板, 都是常量</code></p>\n</li>\n<li><p>具体看第九章</p>\n</li>\n<li><p>类型不同：</p>\n</li>\n</ol>\n<h3 id=\"内联函数（inline）：-用函数体内的语句，替换函数调用表达式，编译时完成，类似-define\"><a href=\"#内联函数（inline）：-用函数体内的语句，替换函数调用表达式，编译时完成，类似-define\" class=\"headerlink\" title=\"内联函数（inline）： 用函数体内的语句，替换函数调用表达式，编译时完成，类似 #define\"></a><strong>内联函数（inline）： </strong>用函数体内的语句，替换函数调用表达式，编译时完成，类似 #define</h3><p>声明： <code>inline int calArea(int a){  }</code></p>\n<p>要求： 1. 不能有循环，switch语句 2. 定义在调用之前 3. 不能有异常接口声明</p>\n<h3 id=\"constexpr-函数：（常量表达式函数）\"><a href=\"#constexpr-函数：（常量表达式函数）\" class=\"headerlink\" title=\"constexpr 函数：（常量表达式函数）\"></a>constexpr 函数：（常量表达式函数）</h3><h3 id=\"带默认参数的函数：\"><a href=\"#带默认参数的函数：\" class=\"headerlink\" title=\"带默认参数的函数：\"></a><strong>带默认参数的函数：</strong></h3><pre><code>int getVa(int length, int weight = 2)\n</code></pre><h3 id=\"函数的重载：（C-多态性的重要机制，编译过程中实现）\"><a href=\"#函数的重载：（C-多态性的重要机制，编译过程中实现）\" class=\"headerlink\" title=\"函数的重载：（C++多态性的重要机制，编译过程中实现）\"></a><strong>函数的重载：</strong>（C++多态性的重要机制，编译过程中实现）</h3><p>函数体同名，参数类型不同/参数个数不同</p>\n<pre><code>int add(int x, int y);\n\nfloat add(float x, float y);\n\nfloat add(float x, float y, float z);\n</code></pre><h3 id=\"C-系统函数：\"><a href=\"#C-系统函数：\" class=\"headerlink\" title=\"C++系统函数：\"></a><strong>C++系统函数：</strong></h3><pre><code>#include &lt;cmath&gt;\n    |_\n    |_\n#include &lt;cstdlib&gt;\n    |_\n    |_\n#include &lt;cstdio&gt;\n    |_\n    |_\n#include &lt;ctime&gt;\n    |_\n    |_\n</code></pre><h2 id=\"类和对象\"><a href=\"#类和对象\" class=\"headerlink\" title=\"类和对象\"></a><strong>类和对象</strong></h2><p>类：构建对象的蓝图，</p>\n<p>对象：由类创建，含有数据和方法</p>\n<p>封装：对数据和操作数据的方法的组合绑定</p>\n<p>继承：在已有类基础上，形成新的类</p>\n<p>多态：</p>\n<p>构造函数：定义对象时，通过构造函数初始化</p>\n<p>析构函数：删除对象时，通过析构函数释放资源</p>\n<h3 id=\"类和对象的定义：\"><a href=\"#类和对象的定义：\" class=\"headerlink\" title=\" 类和对象的定义：\"></a><strong> 类和对象的定义：</strong></h3><p>定义类：</p>\n<pre><code>class {  //类名称 \n    public:\n        // 公有成员,外部接口\n    private:\n        // 私有成员\n    protected:\n        int hour = 0; // 类内初始化\n        // 保护型成员\n}\n</code></pre><p>注意：不指定类型，默认为私有；</p>\n<h3 id=\"成员函数：\"><a href=\"#成员函数：\" class=\"headerlink\" title=\"成员函数：\"></a><strong>成员函数：</strong></h3><pre><code>|_ 内联成员函数： 类内声明或者inline关键字\n\n|_类外实现：void 类名称::成员函数名称（）{ }\n</code></pre><h3 id=\"构造函数：\"><a href=\"#构造函数：\" class=\"headerlink\" title=\"构造函数：\"></a><strong>构造函数：</strong></h3><ul>\n<li><p>在创建对象时，自动调用来初始化数据</p>\n</li>\n<li><p>与类名相同</p>\n</li>\n<li><p>构造函数有初始化列表</p>\n</li>\n<li><p>格式 类名（string s, lei i）：s(初始值)，i(初始值){ }；</p>\n</li>\n</ul>\n<h3 id=\"委托构造函数：一个构造函数-通过另一个构造函数-初始化\"><a href=\"#委托构造函数：一个构造函数-通过另一个构造函数-初始化\" class=\"headerlink\" title=\"委托构造函数：一个构造函数 通过另一个构造函数 初始化\"></a><strong>委托构造函数：</strong>一个构造函数 通过另一个构造函数 初始化</h3><h3 id=\"复制构造函数：\"><a href=\"#复制构造函数：\" class=\"headerlink\" title=\"复制构造函数：\"></a><strong>复制构造函数：</strong></h3><p>用途：</p>\n<ul>\n<li><p>用存在的对象 去初始化新对象 （通过引用旧的对象）</p>\n</li>\n<li><p>函数f的形参是类的对象，调用f时，将用实参对象初始化形参对象</p>\n</li>\n<li><p>函数g的返回值是类的对象，用return的对象来在主调函数中初始化一个无名对象</p>\n</li>\n</ul>\n<h3 id=\"析构函数：生存期结束，删除清理工作，不能有return，不能有参数\"><a href=\"#析构函数：生存期结束，删除清理工作，不能有return，不能有参数\" class=\"headerlink\" title=\"析构函数：生存期结束，删除清理工作，不能有return，不能有参数\"></a><strong>析构函数：</strong>生存期结束，删除清理工作，不能有return，不能有参数</h3><pre><code>class 类名{\n\npublic:\n    类名（形参）； // 构造函数\n    类名（const 类名&amp; 旧对象名）；  // 复制构造函数 =delete是不生成\n    ~ 类名（）；\n}\n</code></pre><blockquote>\n<p>  注：未声明时，编译器自己生成一个默认的</p>\n</blockquote>\n<h3 id=\"前向引用声明：两个类相互引用时，某个类在引用之前就声明\"><a href=\"#前向引用声明：两个类相互引用时，某个类在引用之前就声明\" class=\"headerlink\" title=\"前向引用声明：两个类相互引用时，某个类在引用之前就声明\"></a><strong>前向引用声明：</strong>两个类相互引用时，某个类在引用之前就声明</h3><pre><code>class A;  //前向引用声明，只是一个标识符，不是万能的\nclass B{\npublic:\n    void A(B b);\n}\n\nclass A{\npublic：\n    void B（A a）;\n}\n</code></pre><h3 id=\"结构体：特殊的类，默认是公有的，可以有函数成员\"><a href=\"#结构体：特殊的类，默认是公有的，可以有函数成员\" class=\"headerlink\" title=\"结构体：特殊的类，默认是公有的，可以有函数成员\"></a><strong>结构体：</strong>特殊的类，默认是公有的，可以有函数成员</h3><pre><code>//公有成员\n    int a;\nprotected:\n    int b;\nprivate:\n    int c;\n};\n</code></pre><h3 id=\"联合体：\"><a href=\"#联合体：\" class=\"headerlink\" title=\"联合体：\"></a><strong>联合体：</strong></h3><p>目的：存储空间的共用，成员不能同时有效，比如某人语文课成绩，只有一种可能；</p>\n<pre><code>union Mark{ // 成绩的联合体， 只有一个成立\n    char grade;  //等级类的成绩\n    bool pass;  // 是否通过的成绩\nint percent;  //百分制成绩  }\n</code></pre><h3 id=\"枚举类：\"><a href=\"#枚举类：\" class=\"headerlink\" title=\"枚举类：\"></a><strong>枚举类：</strong></h3><p>enum class 枚举类型名： 底层类型（int）<strong>{</strong> 枚举列表 <strong>};</strong></p>\n<pre><code>//默认 int\n</code></pre><p>优势：</p>\n<ul>\n<li><p>强制作用域 –必须在枚举类 枚举类型名：：枚举值，不同枚举类可以有同名值了</p>\n</li>\n<li><p>转换限制 –枚举对象不能与整型 隐式转换</p>\n</li>\n<li><p>底层类型 –可以指定</p>\n</li>\n</ul>\n<h2 id=\"数据共享和保护：\"><a href=\"#数据共享和保护：\" class=\"headerlink\" title=\"数据共享和保护：\"></a><strong>数据共享和保护：</strong></h2><h3 id=\"作用域分类：\"><a href=\"#作用域分类：\" class=\"headerlink\" title=\"作用域分类：\"></a><strong>作用域分类：</strong></h3><p>函数原型作用域：</p>\n<ul>\n<li>形参的范围在（）内，所以不需要名字也行，int area( int );</li>\n</ul>\n<p>局部作用域</p>\n<ul>\n<li><p>函数{ }内</p>\n</li>\n<li><p>if、for、while { }内</p>\n</li>\n</ul>\n<p>类作用域： 类外访问类的成员</p>\n<ul>\n<li><p>静态成员：通过 对象名.成员名 访问</p>\n</li>\n<li><p>非静态成员：</p>\n</li>\n<li><p>文件作用域</p>\n</li>\n<li><p>命名空间作用域： 10章</p>\n</li>\n</ul>\n<h3 id=\"对象的生存期：\"><a href=\"#对象的生存期：\" class=\"headerlink\" title=\"对象的生存期：\"></a><strong>对象的生存期：</strong></h3><p>静态生存期： 整个程序结束后消失</p>\n<ul>\n<li>函数内的静态对象， 用static ，全局寿命，只局部可见</li>\n</ul>\n<p>动态生存期：</p>\n<ul>\n<li><p>离开作用域后消失</p>\n</li>\n<li><p>下次进函数重新生成对象</p>\n</li>\n</ul>\n<h3 id=\"类的静态数据成员：\"><a href=\"#类的静态数据成员：\" class=\"headerlink\" title=\"类的静态数据成员：\"></a><strong>类的静态数据成员：</strong></h3><ul>\n<li><p>static 声明</p>\n</li>\n<li><p>为该类所有对象共享，具有静态生存期</p>\n</li>\n<li><p>必须在类外定义和初始化，类内声明，用：：指明所属于的类</p>\n</li>\n</ul>\n<p>比如记录 类产生了多少对象；opencv中的Mat对象好像用到了？？？？</p>\n<pre><code>class base{   \n    public :   \n           static   int   _num;//声明   \n};   \nint  base::_num=0;  //真正定义  \n</code></pre><h3 id=\"类的友元：\"><a href=\"#类的友元：\" class=\"headerlink\" title=\"类的友元：\"></a><strong>类的友元：</strong></h3><ul>\n<li><p>破坏数据封装和数据隐藏的机制</p>\n</li>\n<li><p>尽量不用</p>\n</li>\n</ul>\n<h3 id=\"友元函数：\"><a href=\"#友元函数：\" class=\"headerlink\" title=\" 友元函数：\"></a><strong> 友元函数：</strong></h3><ul>\n<li><p>类声明中由关键字 friend 修饰说明的非成员函数</p>\n</li>\n<li><p>可以在其函数体内访问对象的private,protected成员</p>\n</li>\n<li><p>但必须通过对象名：：访问，函数参数为类的引用</p>\n</li>\n<li><h3 id=\"友元类：\"><a href=\"#友元类：\" class=\"headerlink\" title=\" 友元类：\"></a><strong> 友元类：</strong></h3><pre><code>class A{\n    friend B;\n  public:\n    void display(){\n        count &lt;&lt; x &lt;&lt; enld;\n    }\n  private:\n    int x;\n}\n\nclass B{\n  public:\n    void set(int i);\n    void display();\n  private:\n    A a;\n}\n\nvoid B::set(int i){\n    a.x = i;   // B类中改变 A类私有值\n}\nvoid B::display(){\n    a.display()\n}\n</code></pre></li>\n</ul>\n<h3 id=\"共享数据的保护：\"><a href=\"#共享数据的保护：\" class=\"headerlink\" title=\"共享数据的保护：\"></a><strong>共享数据的保护：</strong></h3><p>#<strong>常类型：</strong>const</p>\n<p>常对象：必须初始化，不可更新</p>\n<pre><code>class A{\n}\nA const a; // a是常对象\n</code></pre><p>常成员：(不可以放在构造函数体内复制，可以在初始化列表中)</p>\n<pre><code>A：：A(int i):a(i){ }\n</code></pre><ul>\n<li><p>常数据成员：const修饰的</p>\n</li>\n<li><p>静态常数据成员： static const int b;</p>\n</li>\n<li><p>常函数成员（用来处理常对象的函数）</p>\n<ul>\n<li><p>不更新对象的数据成员</p>\n</li>\n<li><p>声明和实现都带const</p>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>class A{\n    void f（int a）const;\n}\nvoid A::f(int a) const{  \n}; // f是常对象函数, 处理常对象\n</code></pre><ul>\n<li>常引用：不可更新</li>\n</ul>\n<p>　　　引用是双向传递的，避免修改原值的方法就是常引用；</p>\n<pre><code>const A&amp; a;\n</code></pre><ul>\n<li><p>常数组：</p>\n</li>\n<li><p>常指针：</p>\n</li>\n</ul>\n<h3 id=\"多文件结构和预编译命令：\"><a href=\"#多文件结构和预编译命令：\" class=\"headerlink\" title=\"多文件结构和预编译命令：\"></a><strong>多文件结构和预编译命令：</strong></h3><ul>\n<li><p>.h 系统使用</p>\n</li>\n<li><p>.hpp 个人使用(类的声明,函数的声明)</p>\n</li>\n<li><p>.cpp (类的实现，函数的实现)</p>\n<p> <img src=\"/2019/01/20/C-梳理笔记/f5d645ed218d5fa3e753f771b72310fc.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"外部变量：\"><a href=\"#外部变量：\" class=\"headerlink\" title=\"外部变量：\"></a><strong>外部变量：</strong></h3><p>文件作用域中定义的变量默认是外部变量，其他文件使用前，extern声明</p>\n<p>将变量和函数限制在编译单元内：namespcae:</p>\n<pre><code>namespace{ //匿名的命名空间，外部不可调用任何东西\n    int i;\n    void fun(){\n        i++;\n    }\n}\n</code></pre><h3 id=\"预编译命令：\"><a href=\"#预编译命令：\" class=\"headerlink\" title=\"预编译命令：\"></a><strong>预编译命令：</strong></h3><pre><code>#include&lt; &gt;  标准方式搜索，从系统目录include\n\n\n#include”” 先当前目录搜索，没有再标准搜索\n\n\n#define \n\n\n#undef 删除有#define的宏\n\n#if 表达式  // 条件编译指令\n---\n#else\n---\n#endif \n\n\n#ifndef 标识符\n---\n#else  \n---\n#endif\n</code></pre><h2 id=\"数组，指针与字符串：\"><a href=\"#数组，指针与字符串：\" class=\"headerlink\" title=\"数组，指针与字符串：\"></a><strong>数组，指针与字符串：</strong></h2><h3 id=\"数组：\"><a href=\"#数组：\" class=\"headerlink\" title=\"数组：\"></a><strong>数组：</strong></h3><p>定义： <code>int arr**[**m**][**n**]**…;</code></p>\n<p>　　注：二维数组中 arr[1] 第二行首地址</p>\n<h3 id=\"数组作为函数参数：\"><a href=\"#数组作为函数参数：\" class=\"headerlink\" title=\"数组作为函数参数：\"></a><strong>数组作为函数参数：</strong></h3><p>　　数组名做参数： 形参，实参都是数组名，传入的是地址</p>\n<h3 id=\"对象数组：\"><a href=\"#对象数组：\" class=\"headerlink\" title=\"对象数组：\"></a><strong>对象数组：</strong></h3><p>　　定义：类名 数组名[对象元素个数]</p>\n<p>　　访问：数组名[下标].成员名</p>\n<h3 id=\"基于范围的for循环：c-11-自动遍历整个容器\"><a href=\"#基于范围的for循环：c-11-自动遍历整个容器\" class=\"headerlink\" title=\"基于范围的for循环：c++11,自动遍历整个容器\"></a><strong>基于范围的for循环：</strong>c++11,自动遍历整个容器</h3><pre><code>for( auto x : 容器){ } for( auto &amp;x : 容器){ }\n</code></pre><p>注意：</p>\n<ul>\n<li><p>auto &amp;x是元素引用，auto x是元素的副本</p>\n</li>\n<li><p>auto推导出的类型是容器中的值类型</p>\n</li>\n<li><p>：冒号后的表达式只执行一次</p>\n</li>\n</ul>\n<h3 id=\"指针：\"><a href=\"#指针：\" class=\"headerlink\" title=\"指针：\"></a><strong>指针：</strong></h3><h3 id=\"定义：\"><a href=\"#定义：\" class=\"headerlink\" title=\"定义：\"></a><strong>定义：</strong></h3><pre><code>static int i;\n\nstatic int * p = &amp;I;\n</code></pre><h3 id=\"指针的初始化和赋值：\"><a href=\"#指针的初始化和赋值：\" class=\"headerlink\" title=\"指针的初始化和赋值：\"></a><strong>指针的初始化和赋值：</strong></h3><h3 id=\"指针的算术运算，关系运算：\"><a href=\"#指针的算术运算，关系运算：\" class=\"headerlink\" title=\"指针的算术运算，关系运算：\"></a><strong>指针的算术运算，关系运算：</strong></h3><h3 id=\"指针数组：\"><a href=\"#指针数组：\" class=\"headerlink\" title=\"指针数组：\"></a><strong>指针数组：</strong></h3><pre><code>类名  *p[2];\n</code></pre><h3 id=\"指向数组的指针：\"><a href=\"#指向数组的指针：\" class=\"headerlink\" title=\"指向数组的指针：\"></a><strong>指向数组的指针：</strong></h3><pre><code>int **p; 指向二维数组的指针\n</code></pre><h3 id=\"指针与函数：\"><a href=\"#指针与函数：\" class=\"headerlink\" title=\"指针与函数：\"></a><strong>指针与函数：</strong></h3><ul>\n<li><p>指针做参数：大批量数据提高效率</p>\n</li>\n<li><p>指针类型的函数：返回类型是指针</p>\n<pre><code>int * function(int i){return 全局或者静态的 }；// 不能返回非静态局部变量\n</code></pre></li>\n<li><p>指向函数的指针：实现函数回调的功能</p>\n</li>\n</ul>\n<blockquote>\n<p>  定义： 数据类型 (*f)(参数表);</p>\n</blockquote>\n<blockquote>\n<p>  数据类型：返回值</p>\n</blockquote>\n<ul>\n<li>对象指针：</li>\n</ul>\n<blockquote>\n<p>  定义： 类名 *对象指针名 = &amp; 对象；</p>\n</blockquote>\n<blockquote>\n<p>  访问对象： 对象指针名->成员名</p>\n</blockquote>\n<p>（*对象指针名）.成员名</p>\n<ul>\n<li><p>this 指针：成员函数的一个隐士参数，初始化为对象的地址，不可改变</p>\n</li>\n<li><p>隐含于类的每个非静态成员函数中</p>\n</li>\n<li><p>指出成员函数所操作的当前的对象</p>\n</li>\n<li><p>*this 是当前对象地址</p>\n</li>\n</ul>\n<h3 id=\"动态内存分配：\"><a href=\"#动态内存分配：\" class=\"headerlink\" title=\"动态内存分配：\"></a><strong>动态内存分配：</strong></h3><p>new<strong> 类型名 </strong>(<strong>初始化列表</strong>) // 返回首字节地址</p>\n<p>delete 指针p //p一直在，删除的只是p指向的对象申请的空间</p>\n<p>动态数组：<br>new 类型名[数组长度]</p>\n<p>delete[] 数组首地址p指针</p>\n<h3 id=\"智能指针：C-11\"><a href=\"#智能指针：C-11\" class=\"headerlink\" title=\"智能指针：C++11\"></a><strong>智能指针：</strong>C++11</h3><h3 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a><strong>内存管理</strong></h3><ul>\n<li><p>unique_ptr:</p>\n<ul>\n<li>不允许多个指针共享资源，标准库中move可以转移指针，但原来指针会失效</li>\n</ul>\n</li>\n<li><p>shared_ptr:</p>\n<ul>\n<li>多指针共享</li>\n</ul>\n</li>\n<li><p>weak_ptr:</p>\n<ul>\n<li>可复制共享</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>  Vector对象：类模板</p>\n</blockquote>\n<p>优势：</p>\n<ul>\n<li><p>封装任何形式的动态数组，自动创建，删除</p>\n</li>\n<li><p>下标越界检查</p>\n</li>\n</ul>\n<p>定义： vector &lt;元素类型&gt; object（长度）</p>\n<ul>\n<li><p><code>object.begin()  object.end()  object.size()</code></p>\n</li>\n<li><p>auto 遍历vector <code>for(auto e: object);</code></p>\n</li>\n</ul>\n<h3 id=\"对象的复制和移动：\"><a href=\"#对象的复制和移动：\" class=\"headerlink\" title=\"对象的复制和移动：\"></a><strong>对象的复制和移动：</strong></h3><ul>\n<li><p>浅层复制和深层复制：复制对象用到复制构造函数，默认的复制构造只传递了指针，两个变量指向同一块内存，释放其中一个，再释放第二个会出错；</p>\n<ul>\n<li><p>浅层：实现对象间数据一一对应的复制，但两个对象指向同一内存</p>\n</li>\n<li><p>深层：当对象成员是指针类型，应该对指针所指对象进行复制。</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>  类名<strong>::</strong>类名<strong>(</strong>const 类名<strong>&amp;</strong> v<strong>){</strong></p>\n</blockquote>\n<blockquote>\n<p>  size <strong>=</strong> v<strong>.</strong>size<strong>;</strong></p>\n</blockquote>\n<blockquote>\n<p>  data_ptr <strong>= new</strong> Ponit<strong>[</strong>size<strong>];</strong></p>\n</blockquote>\n<blockquote>\n<p>  <strong>for(</strong>int i<strong>=</strong>0<strong>;</strong> i <strong>\\&lt;</strong> size<strong>; ++</strong>i<strong>){</strong></p>\n</blockquote>\n<blockquote>\n<p>  data_ptr<strong>[</strong>i<strong>] =</strong> v<strong>.</strong>data_ptr<strong>[</strong>i<strong>];</strong></p>\n</blockquote>\n<blockquote>\n<p>  <strong>}</strong></p>\n</blockquote>\n<blockquote>\n<p>  <strong>}</strong></p>\n</blockquote>\n<ul>\n<li><p>移动构造：C++11,省去了构造和删除临时对象的过程</p>\n<p><img src=\"/2019/01/20/C-梳理笔记/8c3092d99bcdba78edeb2d8123270ffe.png\" alt=\"\"></p>\n</li>\n</ul>\n<blockquote>\n<p>  class_name<strong>(</strong>class_name <strong>&amp;&amp;</strong>old<strong>)::</strong>xptr<strong>(</strong>old<strong>.</strong>xptr<strong>){</strong></p>\n</blockquote>\n<blockquote>\n<p>  n<strong>.</strong>xptr <strong>= NULL;</strong> // 原来的指针清空</p>\n</blockquote>\n<blockquote>\n<p>  <strong>}</strong></p>\n</blockquote>\n<h3 id=\"C风格字符串：字符数组\"><a href=\"#C风格字符串：字符数组\" class=\"headerlink\" title=\"C风格字符串：字符数组\"></a><strong>C风格字符串：</strong>字符数组</h3><h3 id=\"string类：\"><a href=\"#string类：\" class=\"headerlink\" title=\"string类：\"></a><strong>string类：</strong></h3><p>常用构造函数：</p>\n<ul>\n<li><p>string(); //默认构造，长度为0</p>\n<ul>\n<li>string s1<strong>;</strong></li>\n</ul>\n</li>\n<li><p>string(const char *s) //指针s所指向的字符串常量初始化该对象</p>\n<pre><code>string s2 = “abc”;\n\nstring(const string &amp;rhs) //复制构造函数\n\nstring s3 = s2;\n</code></pre></li>\n</ul>\n<p>访问：下标访问</p>\n<p>整行字符串的输入： cin 被空格隔开</p>\n<p>getline(cin,s2); //包含#include\\&lt;string></p>\n<p>getline(cin,s2,’,’);</p>\n<h2 id=\"继承和派生：-充分利用原有的\"><a href=\"#继承和派生：-充分利用原有的\" class=\"headerlink\" title=\"继承和派生： 充分利用原有的\"></a><strong>继承和派生：</strong> 充分利用原有的</h2><p>继承：保持已有类的特征来构造新类</p>\n<p>派生：在已有类基础上新增自己的特性</p>\n<p>基类：父类</p>\n<p>派生类：子类</p>\n<p>直接基类和间接基类</p>\n<p>单继承：</p>\n<pre><code>class 派生类名：继承方式 基类名{  //继承方式，\n    成员声明；//新增成员的声明\n}\n</code></pre><p>多继承：</p>\n<pre><code>class 派生类名：继承方式1 基类1，继承方式2 基类2{\n    成员声明；\n}\n</code></pre><h3 id=\"继承的方式：\"><a href=\"#继承的方式：\" class=\"headerlink\" title=\"继承的方式：\"></a><strong>继承的方式：</strong></h3><p>控制：派生类对基类成员的访问权限</p>\n<ul>\n<li>公有继承 public</li>\n</ul>\n<blockquote>\n<p>  基类中的pubilc和protected访问属性在派生类中不变</p>\n</blockquote>\n<blockquote>\n<p>  基类的pravate不可被对象直接访问</p>\n</blockquote>\n<ul>\n<li><p>私有继承 ：内部可以访问基类的公有和保护成员，但是其对象不再可以访问</p>\n</li>\n<li><p>保护继承 ：基类的公有和保护，到这都成了保护成员，类内可以访问，但对象不能</p>\n</li>\n</ul>\n<p>派生类的构成：</p>\n<ul>\n<li><p>吸收基类成员</p>\n</li>\n<li><p>改造基类成员</p>\n<ul>\n<li>增加同名成员，基类成员被覆盖（重新定义继承的成员函数必须用虚函数）</li>\n</ul>\n</li>\n<li><p>添加新成员</p>\n</li>\n</ul>\n<h3 id=\"类型转换：-1\"><a href=\"#类型转换：-1\" class=\"headerlink\" title=\"类型转换：\"></a><strong>类型转换：</strong></h3><p>基类和派生类之间：</p>\n<p>派生类的对象可以隐含转换为基类对象；</p>\n<p>派生类的对象可以初始化基类的引用；</p>\n<p>派生类的指针可以隐含转换为基类的指针；</p>\n<h3 id=\"派生类的构造函数：\"><a href=\"#派生类的构造函数：\" class=\"headerlink\" title=\"派生类的构造函数：\"></a><strong>派生类的构造函数：</strong></h3><p>默认情况下，基类的构造函数不被继承，派生类需要自己构造</p>\n<p>c++11，using语句继承基类构造函数</p>\n<h3 id=\"派生类的复制构造函数：\"><a href=\"#派生类的复制构造函数：\" class=\"headerlink\" title=\"派生类的复制构造函数：\"></a><strong>派生类的复制构造函数：</strong></h3><h3 id=\"派生类的析构函数：\"><a href=\"#派生类的析构函数：\" class=\"headerlink\" title=\"派生类的析构函数：\"></a><strong>派生类的析构函数：</strong></h3><h3 id=\"虚基类：\"><a href=\"#虚基类：\" class=\"headerlink\" title=\"虚基类：\"></a><strong>虚基类：</strong></h3><h2 id=\"多态性\"><a href=\"#多态性\" class=\"headerlink\" title=\"多态性\"></a><strong>多态性</strong></h2><h3 id=\"运算符重载：\"><a href=\"#运算符重载：\" class=\"headerlink\" title=\"运算符重载：\"></a><strong>运算符重载：</strong></h3><pre><code>//双目运算符\n函数类型 operator 运算符（参数）  \n{\n    // 参数个数 = 原操作数个数 - 1\n}\n//前置单目运算符，返回引用所以可以当左值\n函数类型 &amp; operator ++（无参数）  \n{\n    return * this;\n}\n//后置单目运算符，\n函数类型 operator ++（参数为int类型）  \n{\n    old = *this;\n    ++(*this);  //调用的前置\n    return old;\n}\n</code></pre><ul>\n<li>重载为非成员函数：</li>\n</ul>\n<ol>\n<li><p>列出所有操作数</p>\n</li>\n<li><p>至少有一个自定义类型参数</p>\n</li>\n<li><p>后置单目运算，参数要增加int,但不用写形参名</p>\n</li>\n<li><p>要操作某类对象的私有成员，则可声明为该类的友元函数</p>\n</li>\n</ol>\n<h3 id=\"虚函数：virtual改造基类成员，实现动态绑定；必须是非静态成员\"><a href=\"#虚函数：virtual改造基类成员，实现动态绑定；必须是非静态成员\" class=\"headerlink\" title=\"虚函数：virtual改造基类成员，实现动态绑定；必须是非静态成员\"></a><strong>虚函数：</strong>virtual改造基类成员，实现动态绑定；必须是非静态成员</h3><blockquote>\n<p>  原理：编译时先不确定和哪个类的成员对应，在程序运行时刻，再对应；</p>\n</blockquote>\n<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nclass Base1{\npublic:\n    virtual void display() const; //虚函数，不要用内联\n};\n\nvoid Base1::display() const{\n    cout &lt;&lt; &quot;Base1 &quot; &lt;&lt; endl;\n}\n\nclass Base2:public Base1{\npublic:\n    virtual void display() const;\n}\nvoid Base2::display() const{\n    cout &lt;&lt; &quot;Base2&quot; &lt;&lt; endl;\n}\n</code></pre><h3 id=\"虚析构函数：打算通过基类指针调用某一个对象的析构函数（执行delete）\"><a href=\"#虚析构函数：打算通过基类指针调用某一个对象的析构函数（执行delete）\" class=\"headerlink\" title=\"虚析构函数：打算通过基类指针调用某一个对象的析构函数（执行delete）\"></a><strong>虚析构函数：</strong>打算通过基类指针调用某一个对象的析构函数（执行delete）</h3><h3 id=\"虚表和动态绑定：\"><a href=\"#虚表和动态绑定：\" class=\"headerlink\" title=\"虚表和动态绑定：\"></a><strong>虚表和动态绑定：</strong></h3><blockquote>\n<p>  虚表：</p>\n</blockquote>\n<ul>\n<li><p>每个多态类都有虚表；</p>\n</li>\n<li><p>存放各个数函数的入口地址；</p>\n</li>\n<li><p>每个对象有指向当前类的虚表的指针（虚指针vptr）；</p>\n</li>\n</ul>\n<blockquote>\n<p>  动态绑定：</p>\n</blockquote>\n<ul>\n<li>构造函数为对象的虚指针赋值</li>\n</ul>\n<h3 id=\"抽象类：含有纯虚函数的类-不能直接定义对象\"><a href=\"#抽象类：含有纯虚函数的类-不能直接定义对象\" class=\"headerlink\" title=\"抽象类：含有纯虚函数的类,不能直接定义对象\"></a><strong>抽象类：</strong>含有纯虚函数的类,不能直接定义对象</h3><blockquote>\n<p>  纯虚函数：</p>\n</blockquote>\n<blockquote>\n<p>  基类中声明的虚函数，在基类中没有定义具体的操作，要求在派生类中根据实际需求完</p>\n</blockquote>\n<blockquote>\n<p>  成自己的版本：</p>\n</blockquote>\n<pre><code>virtual 函数类型 函数名**(**参数名**) =** 0**;**\n</code></pre><h3 id=\"override-和-final-C-11\"><a href=\"#override-和-final-C-11\" class=\"headerlink\" title=\"override 和 final :C++11\"></a><strong>override 和 final :</strong>C++11</h3><p>override声明的函数，必须在基类中找到原型；</p>\n<p>final 不允许继承或者覆盖；</p>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a><strong>模板</strong></h2><h3 id=\"函数魔板：整数和浮点数求绝对值，需要多次重载函数，但是用函数模板，只需要设计通用功能；\"><a href=\"#函数魔板：整数和浮点数求绝对值，需要多次重载函数，但是用函数模板，只需要设计通用功能；\" class=\"headerlink\" title=\"函数魔板：整数和浮点数求绝对值，需要多次重载函数，但是用函数模板，只需要设计通用功能；\"></a><strong>函数魔板：</strong>整数和浮点数求绝对值，需要多次重载函数，但是用函数模板，只需要设计通用功能；</h3><p>template\\&lt;模板参数表> // 类型：class或者typename 常量：</p>\n<p>函数定义</p>\n<pre><code>template&lt;typename T&gt;\nT abs(T x){\n    return x&lt;0?-x:x;\n}\n</code></pre><h3 id=\"类模板：\"><a href=\"#类模板：\" class=\"headerlink\" title=\"类模板：\"></a><strong>类模板：</strong></h3><pre><code>template&lt;模板参数表&gt;\nclass 类名{\n    类成员声明;\n}\n\n//类成员定义\ntemplate &lt;模板参数表&gt;\n类型名  类名&lt;模板参数标识符列表&gt; :: 函数名(参数表)\n{\n\n}\n</code></pre><h3 id=\"线性群体：按位置顺序有序排列\"><a href=\"#线性群体：按位置顺序有序排列\" class=\"headerlink\" title=\"线性群体：按位置顺序有序排列\"></a><strong>线性群体：</strong>按位置顺序有序排列</h3><p>直接访问：</p>\n<p>数组类模板：</p>\n<p>索引访问：</p>\n<p>顺序访问：</p>\n<p>链表类和结点类模板：</p>\n<p>单链表：每个结点包括数据和指针，只有一个指向后续结点的称为单链表；</p>\n<p><img src=\"/2019/01/20/C-梳理笔记/9167a427f849e864c5d630d0c0bc3163.png\" alt=\"\"></p>\n<p>单链表结点类模板：</p>\n<pre><code>template &lt;class T&gt;\nclass Node{\n    private:\n        Node&lt;T&gt; *next;\n    public:\n        T data; \n        Node(const T&amp;item,Node&lt;T&gt;* next = 0);  //构造函数\n    void insertAfter(Node&lt;T&gt; *p); //插入\n    Node&lt;T&gt; *deleteAfter();  //删除\n    Node&lt;T&gt; *nextNode() const; \n}\n\ntemplate &lt;class T&gt;\nvoid Node&lt;T&gt;::insertAfter(Node&lt;T&gt; *p){  // *p是要插入的结点\n// p节点的指针指向当前节点的后续结点\n    p-&gt;next = next; // next是原链表待插入位置的结点的指针\n    next = p;  \n}\ntemplate &lt;class T&gt;\nNode&lt;T&gt; *deleteAfter(){\n    Node&lt;T&gt; * tempPtr = next;\n    if (next == NULL)  //判断是否是删除最后的元素\n        return 0;\n    next = tempPtr = next;\n    return tempPtr;\n}\n</code></pre><blockquote>\n<p>  插入：</p>\n</blockquote>\n<p><img src=\"/2019/01/20/C-梳理笔记/85d072d9c8a8366378b00b9af8ca4920.png\" alt=\"\"></p>\n<blockquote>\n<p>  头插法：可以当队列</p>\n</blockquote>\n<blockquote>\n<p>  尾插法：栈</p>\n</blockquote>\n<blockquote>\n<p>  删除：</p>\n</blockquote>\n<p><img src=\"/2019/01/20/C-梳理笔记/ffdd5c0226d2a3f9a7833379eb0ebf90.png\" alt=\"\"></p>\n<p>待查询：</p>\n<p>explicit关键字</p>\n<p>构造函数 explicit可以抑制内置类型隐式转换</p>\n<h2 id=\"泛型设计\"><a href=\"#泛型设计\" class=\"headerlink\" title=\"泛型设计\"></a><strong>泛型设计</strong></h2><p>基本概念：</p>\n<p>编写不依赖具体数据类型的程序，通用的；</p>\n<p>STL简介：(Standard Template Library)</p>\n<p>C++ string类库入门：</p>\n<pre><code>#include &lt;iostream&gt;\n\n#include &lt;string&gt;\n\nusing namespace std;\n\nint main()\n{\n\n    // 构造函数：\n    string str1 = &quot;Yesterday&quot;;\n\n    string str2(&quot;Today&quot;);\n\n    string str3(&quot;Hello&quot;,2); //取c风格字符串 长度为 2 作为初值，即&quot;He&quot;\n\n    string str4(str1, 6); // 始于位置6开始的字符串，即&quot;day&quot;\n\n    string str5(str1,6,1); // 始于6，长度1，即&quot;d&quot;\n\n    string str6(1,&apos;a&apos;); //6个&apos;a&apos;\n\n    // 赋值，交换\n    str1.assign(&quot;hahahaha&quot;); //重新赋值\n\n    swap(str1,str2); //交换两个字符串内容 str1=&quot;Today&quot; str2=&quot;hahahaha&quot;\n\n    // 追加\n    str1 += &quot; we&quot;; // += 可追加 string对象，字符串，字符\n\n    str1.append(&quot; ar&quot;); // append 可追加 string对象，字符串\n\n    str1.push_back(&apos;e&apos;); //push_back 只能追加字符 str1 = &quot;Today we are&quot;\n\n    // 插入\n    str1.insert(0,&quot; family&quot;); //str1 = &quot;Today we are family&quot;\n\n    // 删除\n    str1.erase(2,1); //第2个位置开始， len = 1 个字符\n\n    str1.clear(); //删除全部\n\n    // 访问字符串\n    string s = &quot;asdfgh&quot;;\n\n    cout &lt;&lt; s[1]; // &apos;s&apos;\n\n    cout &lt;&lt; s.at(2); // &apos;d&apos;\n\n    // 查找\n    int position = s.find(&apos;f&apos;,0); // 从0开始查找第一次出现‘f’的坐标\n\n    // 替换\n    s.replace(s.find(&apos;f&apos;),3,&quot;ZZZ&quot;); //替换find的位置处\n    3个字符串为 “ZZZ”\n\n    // 分割\n    getchar();\n\n    return 0;\n\n}\n</code></pre>"}],"PostAsset":[{"_id":"source/_posts/图片测试！/test.jpg","post":"cjraa7jto0004z0qzrog572n1","slug":"test.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Network-in-Network/nerworkInNetwork1.png","post":"cjraa7jtm0003z0qz56c5l89c","slug":"nerworkInNetwork1.png","modified":1,"renderable":1},{"_id":"source/_posts/Network-in-Network/nerworkInNetwork2.png","post":"cjraa7jtm0003z0qz56c5l89c","slug":"nerworkInNetwork2.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cjraa7jtm0003z0qz56c5l89c","category_id":"cjraa7jtq0005z0qzvxaeeb1w","_id":"cjraa7jtx000bz0qzhtkuhbwa"},{"post_id":"cjraa7jto0004z0qzrog572n1","category_id":"cjraa7jtv0008z0qzfcu15q5l","_id":"cjraa7ju0000fz0qz3djvrux0"},{"post_id":"cjraa7jtt0007z0qzwimnuxsa","category_id":"cjraa7jtv0008z0qzfcu15q5l","_id":"cjraa7ju0000hz0qzyqc3d3d1"},{"post_id":"cjraa7k1n000jz0qzt2q5l45s","category_id":"cjraa7k1p000kz0qzn331v3s1","_id":"cjraa7k1q000nz0qz6xo0am28"}],"PostTag":[{"post_id":"cjraa7jtm0003z0qz56c5l89c","tag_id":"cjraa7jtt0006z0qziycmyl6r","_id":"cjraa7jtw000az0qzjqdv8idm"},{"post_id":"cjraa7jto0004z0qzrog572n1","tag_id":"cjraa7jtw0009z0qzspp9gbie","_id":"cjraa7jtz000ez0qzrd6w9iwi"},{"post_id":"cjraa7jtt0007z0qzwimnuxsa","tag_id":"cjraa7jtw0009z0qzspp9gbie","_id":"cjraa7ju0000gz0qzi5g82prt"},{"post_id":"cjraa7k1n000jz0qzt2q5l45s","tag_id":"cjraa7k1q000lz0qzb9cu5ybb","_id":"cjraa7k1q000mz0qz3gsesvl0"}],"Tag":[{"name":"深度学习论文","_id":"cjraa7jtt0006z0qziycmyl6r"},{"name":"闲聊","_id":"cjraa7jtw0009z0qzspp9gbie"},{"name":"C++","_id":"cjraa7k1q000lz0qzb9cu5ybb"}]}}